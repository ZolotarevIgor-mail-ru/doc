
msgid "Submodule `box.error`"
msgstr "Вложенный модуль `box.error`"

msgid "Overview"
msgstr "Общие сведения"

msgid ""
"The ``box.error`` function is for raising an error. The difference "
"between this function and Lua's built-in `error "
"<https://www.lua.org/pil/8.3.html>`_ function is that when the error "
"reaches the client, its error code is preserved. In contrast, a Lua error"
" would always be presented to the client as :errcode:`ER_PROC_LUA`."
msgstr ""
"Функция ``box.error`` предназначена для вызова ошибки. Разница между этой"
" функцией и встроенной Lua-функцией `error "
"<https://www.lua.org/pil/8.3.html>`_ в том, что когда клиент получает "
"ошибку, код ошибки сохраняется. В отличие от этого, ошибки в Lua всегда "
"передаются на клиент в виде :errcode:`ER_PROC_LUA`."

msgid "Index"
msgstr "Указатель"

msgid "Below is a list of all ``box.error`` functions."
msgstr "Ниже приведен перечень всех функций модуля ``box.error``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

msgid ":ref:`box.error() <box_error-error>`"
msgstr ":ref:`box.error() <box_error-error>`"

msgid "Throw an error"
msgstr "Вызов ошибки"

msgid ":ref:`box.error.last() <box_error-last>`"
msgstr ":ref:`box.error.last() <box_error-last>`"

msgid "Get a description of the last error"
msgstr "Получение описания последней ошибки"

msgid ":ref:`box.error.clear() <box_error-clear>`"
msgstr ":ref:`box.error.clear() <box_error-clear>`"

msgid "Clear the record of errors"
msgstr "Очистка записи об ошибках"

msgid ":ref:`box.error.new() <box_error-new>`"
msgstr ":ref:`box.error.new() <box_error-new>`"

msgid "Create an error but do not throw"
msgstr "Создание ошибки без выдачи"

msgid ""
"When called with a Lua-table argument, the code and reason have any user-"
"desired values. The result will be those values."
msgstr ""
"При вызове с аргументом из Lua-таблицы значения параметров code и reason "
"будут любыми по желанию пользователя. Результатом будут эти значения."

msgid "Parameters"
msgstr "Параметры"

msgid "description of an error, defined by user"
msgstr "(строка) описание ошибки, задается пользователем"

msgid "numeric code for this error, defined by user"
msgstr "(целое число) числовой код ошибки, задается пользователем"

msgid ""
"When called without arguments, ``box.error()`` re-throws whatever the "
"last error was."
msgstr ""
"При вызове без аргументов ``box.error()`` повторно вызывает последнюю "
"ошибку."

msgid ""
"Emulate a request error, with text based on one of the pre-defined "
"Tarantool errors defined in the file `errcode.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`_ in "
"the source tree. Lua constants which correspond to those Tarantool errors"
" are defined as members of ``box.error``, for example "
"``box.error.NO_SUCH_USER == 45``."
msgstr ""
"Моделирование ошибки запроса с текстом на основе одной из ошибок "
"Tarantool'а, заданных в файле `errcode.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`_ в "
"исходном дереве. Lua-постоянные, которые соответствуют этим ошибкам в "
"Tarantool'е, определяются как элементы ``box.error``, например "
"``box.error.NO_SUCH_USER == 45``."

msgid "number of a pre-defined error"
msgstr "номер предварительно заданной ошибки"

msgid "part of the message which will accompany the error"
msgstr "часть сообщения, которое сопровождает ошибку"

msgid "For example:"
msgstr "Пример:"

#, python-format
msgid ""
"the ``NO_SUCH_USER`` message is \"``User '%s' is not found``\" -- it "
"includes one \"``%s``\" component which will be replaced with errtext. "
"Thus a call to ``box.error(box.error.NO_SUCH_USER, 'joe')`` or "
"``box.error(45, 'joe')`` will result in an error with the accompanying "
"message \"``User 'joe' is not found``\"."
msgstr ""
"сообщение ``NO_SUCH_USER`` = \"``User '%s' is not found``\" (пользователь"
" не найден) -- оно включает в себя компонент \"``%s``\", который будет "
"заменен значением параметра errtext. Таким образом, вызов "
"``box.error(box.error.NO_SUCH_USER, 'joe')`` или ``box.error(45, 'joe')``"
" приведет к ошибке с сообщением \"``User 'joe' is not found``\" "
"(пользователь 'joe' не найден)."

msgid "except"
msgstr "Исключение"

msgid "whatever is specified in errcode-number."
msgstr "то, что указано в номере errcode."

msgid ""
"``box.error()`` is able to accept two types of arguments: either a pair "
"of error code and reason (``box.error{code = 555, reason = 'Arbitrary "
"message'}``) or an error object (``box.error(err)``). In both cases an "
"error is promoted to the diagnostic area."
msgstr ""
"``box.error()`` может принимать два типа аргументов: либо код ошибки и "
"ее причину (``box.error{code = 555, reason = 'Arbitrary message'}``), либо "
"объект ошибки (``box.error(err)``). В обоих случаях ошибка будет "
"отправлена в область хранения сообщений об ошибках."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"tarantool> e1 = box.error.new({code = 111, reason = \"Сause\"})\n"
"---\n"
"...\n"
"tarantool> box.error(e1)\n"
"---\n"
"- error: Сause\n"
"...\n"
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error()\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
"---\n"
"- error: A access denied for user 'B' to function 'C'\n"
"..."
msgstr ""

msgid ""
"Returns a description of the last error, as a Lua table with five "
"members: \"line\" (number) Tarantool source file line number, \"code\" "
"(number) error's number, \"type\", (string) error's C++ class, "
"\"message\" (string) error's message, \"file\" (string) Tarantool source "
"file. Additionally, if the error is a system error (for example due to a "
"failure in socket or file io), there may be a sixth member: \"errno\" "
"(number) C standard error number."
msgstr ""
"Возвращает описание последней ошибки в виде Lua-таблицы с 5 элементами: "
"\"line\" (число) -- номер строки в исходном файле Tarantool'а, \"code\" "
"(число) -- номер ошибки, \"type\" (строка) -- C++ класс ошибки, "
"\"message\" (строка) -- сообщение об ошибке, \"file\" (строка) -- "
"исходный файл Tarantool'а. Кроме того, если ошибка является системной "
"(например, по причине ошибки в сокете или файловом вводы-выводе), может "
"быть дополнительный шестой элемент: \"errno\" (число) стандартный номер "
"ошибки на языке C."

msgid "rtype: table"
msgstr "Тип возвращаемого значения: таблица"

msgid ""
"Clears the record of errors, so functions like `box.error()` or "
"`box.error.last()` will have no effect."
msgstr ""
"Очистка записи об ошибках, то есть функции `box.error()` или "
"`box.error.last()` не сработают."

msgid ""
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.schema.space.create('#')\n"
"---\n"
"- error: Invalid identifier '#' (expected letters, digits or an "
"underscore)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- line: 278\n"
"  code: 70\n"
"  type: ClientError\n"
"  message: Invalid identifier '#' (expected letters, digits or an "
"underscore)\n"
"  file: "
"/tmp/buildd/tarantool-1.7.0.252.g1654e31~precise/src/box/key_def.cc\n"
"...\n"
"tarantool> box.error.clear()\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- null\n"
"..."
msgstr ""
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.schema.space.create('#')\n"
"---\n"
"- error: Invalid identifier '#' (expected letters, digits or an "
"underscore)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- line: 278\n"
"  code: 70\n"
"  type: ClientError\n"
"  message: Invalid identifier '#' (expected letters, digits or an "
"underscore)\n"
"  file: "
"/tmp/buildd/tarantool-1.7.0.252.g1654e31~precise/src/box/key_def.cc\n"
"...\n"
"tarantool> box.error.clear()\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- null\n"
"..."

msgid ""
"Create an error object, but do not throw. This is useful when error "
"information should be saved for later retrieval. The parameters are the "
"same as for :ref:`box.error() <box_error-error>`, see the description "
"there."
msgstr ""
"Создание ошибки без выдачи. Используется, когда необходимо сохранить "
"информацию об ошибке для последующей выборки. Используются такие же "
"параметры, как в :ref:`box.error() <box_error-error>`, см. описание по "
"ссылке."

msgid ""
"tarantool> e = box.error.new{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"...\n"
"tarantool> e:unpack()\n"
"---\n"
"- type: ClientError\n"
"  code: 555\n"
"  message: Arbitrary message\n"
"  trace:\n"
"  - file: '[string \"e = box.error.new{code = 555, reason = "
"''Arbit...\"]'\n"
"    line: 1\n"
"..."
msgstr ""
"tarantool> e = box.error.new{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"...\n"
"tarantool> e:unpack()\n"
"---\n"
"- type: ClientError\n"
"  code: 555\n"
"  message: Arbitrary message\n"
"  trace:\n"
"  - file: '[string \"e = box.error.new{code = 555, reason = "
"''Arbit...\"]'\n"
"    line: 1\n"
"..."

#~ msgid ""
#~ "tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
#~ "---\n"
#~ "- error: Arbitrary message\n"
#~ "...\n"
#~ "tarantool> box.error()\n"
#~ "---\n"
#~ "- error: Arbitrary message\n"
#~ "...\n"
#~ "tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
#~ "---\n"
#~ "- error: A access denied for user 'B' to function 'C'\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
#~ "---\n"
#~ "- error: Arbitrary message\n"
#~ "...\n"
#~ "tarantool> box.error()\n"
#~ "---\n"
#~ "- error: Arbitrary message\n"
#~ "...\n"
#~ "tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
#~ "---\n"
#~ "- error: A access denied for user 'B' to function 'C'\n"
#~ "..."
