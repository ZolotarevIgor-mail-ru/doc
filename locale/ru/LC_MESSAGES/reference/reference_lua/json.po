
msgid "Module `json`"
msgstr "Модуль `json`"

msgid "Overview"
msgstr "Общие сведения"

msgid ""
"The ``json`` module provides JSON manipulation routines. It is based on "
"the `Lua-CJSON module by Mark Pulford "
"<http://www.kyne.com.au/~mark/software/lua-cjson.php>`_. For a complete "
"manual on Lua-CJSON please read `the official documentation "
"<http://www.kyne.com.au/~mark/software/lua-cjson-manual.html>`_."
msgstr ""
"Модуль ``json`` определяет процедуры работы с форматом JSON. Он создан на"
" основе `модуля Lua-CJSON от Mark Pulford "
"<http://www.kyne.com.au/~mark/software/lua-cjson.php>`_. Полное "
"руководство по Lua-CJSON включено в `официальную документацию "
"<http://www.kyne.com.au/~mark/software/lua-cjson-manual.html>`_."

msgid "Index"
msgstr "Указатель"

msgid "Below is a list of all ``json`` functions and members."
msgstr "Ниже приведен перечень всех функций и элементов модуля ``json``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

msgid ":ref:`json.encode() <json-encode>`"
msgstr ":ref:`json.encode() <json-encode>`"

msgid "Convert a Lua object to a JSON string"
msgstr "Конвертация Lua-объекта в JSON-строку"

msgid ":ref:`json.decode() <json-decode>`"
msgstr ":ref:`json.decode() <json-decode>`"

msgid "Convert a JSON string to a Lua object"
msgstr "Конвертация JSON-строки в Lua-объект"

msgid ":ref:`__serialize parameter <json-serialize>`"
msgstr ""

msgid "Output structure specification"
msgstr ""

msgid ":ref:`json.cfg() <json-module_cfg>`"
msgstr ":ref:`json.cfg() <json-module_cfg>`"

msgid "Change configuration"
msgstr ""

msgid ":ref:`json.NULL <json-null>`"
msgstr ":ref:`json.NULL <json-null>`"

msgid "Analog of Lua's \"nil\""
msgstr "Аналог \"nil\" в языке Lua "

msgid "Convert a Lua object to a JSON string."
msgstr "Конвертация Lua-объекта в JSON-строку."

msgid "Parameters"
msgstr "Параметры"

msgid "either a scalar value or a Lua table value."
msgstr "скалярное значение или значение из Lua-таблицы."

msgid "see :ref:`json.cfg <json-module_cfg>`"
msgstr "see :ref:`json.cfg <json-module_cfg>`"

msgid "return"
msgstr "возвращает"

msgid "the original value reformatted as a JSON string."
msgstr "оригинальное значение, преобразованное в JSON-строку."

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "string"
msgstr "строка"

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"tarantool> json=require('json')\n"
"---\n"
"...\n"
"tarantool> json.encode(123)\n"
"---\n"
"- '123'\n"
"...\n"
"tarantool> json.encode({123})\n"
"---\n"
"- '[123]'\n"
"...\n"
"tarantool> json.encode({123, 234, 345})\n"
"---\n"
"- '[123,234,345]'\n"
"...\n"
"tarantool> json.encode({abc = 234, cde = 345})\n"
"---\n"
"- '{\"cde\":345,\"abc\":234}'\n"
"...\n"
"tarantool> json.encode({hello = {'world'}})\n"
"---\n"
"- '{\"hello\":[\"world\"]}'\n"
"..."
msgstr ""
"tarantool> json=require('json')\n"
"---\n"
"...\n"
"tarantool> json.encode(123)\n"
"---\n"
"- '123'\n"
"...\n"
"tarantool> json.encode({123})\n"
"---\n"
"- '[123]'\n"
"...\n"
"tarantool> json.encode({123, 234, 345})\n"
"---\n"
"- '[123,234,345]'\n"
"...\n"
"tarantool> json.encode({abc = 234, cde = 345})\n"
"---\n"
"- '{\"cde\":345,\"abc\":234}'\n"
"...\n"
"tarantool> json.encode({hello = {'world'}})\n"
"---\n"
"- '{\"hello\":[\"world\"]}'\n"
"..."

msgid "Convert a JSON string to a Lua object."
msgstr "Конвертация JSON-строки в Lua-объект."

msgid "a string formatted as JSON."
msgstr "строка в формате JSON."

msgid "the original contents formatted as a Lua table."
msgstr "оригинальное содержание в формате Lua-таблицы."

msgid "table"
msgstr "таблица"

msgid ""
"tarantool> json = require('json')\n"
"---\n"
"...\n"
"tarantool> json.decode('123')\n"
"---\n"
"- 123\n"
"...\n"
"tarantool> json.decode('[123, \"hello\"]')\n"
"---\n"
"- [123, 'hello']\n"
"...\n"
"tarantool> json.decode('{\"hello\": \"world\"}').hello\n"
"---\n"
"- world\n"
"..."
msgstr ""
"tarantool> json = require('json')\n"
"---\n"
"...\n"
"tarantool> json.decode('123')\n"
"---\n"
"- 123\n"
"...\n"
"tarantool> json.decode('[123, \"hello\"]')\n"
"---\n"
"- [123, 'hello']\n"
"...\n"
"tarantool> json.decode('{\"hello\": \"world\"}').hello\n"
"---\n"
"- world\n"
"..."

msgid ""
"See the tutorial :ref:`Sum a JSON field for all tuples <c_lua_tutorial-"
"sum_a_json_field>` to see how ``json.decode()`` can fit in an "
"application."
msgstr ""
"Чтобы увидеть применение ``json.decode()`` в приложении, см. практическое"
" задание :ref:`Подсчет суммы по JSON-полям во всех кортежах "
"<c_lua_tutorial-sum_a_json_field>`."

msgid "**__serialize parameter:**"
msgstr ""

msgid "The JSON output structure can be specified with ``__serialize``:"
msgstr "Структуру JSON-вывода можно указать с помощью ``__serialize``:"

msgid "'seq', 'sequence', 'array' - table encoded as an array"
msgstr ""

msgid "'map', 'mapping' - table encoded as a map"
msgstr ""

msgid ""
"function - the meta-method called to unpack serializable representation "
"of table, cdata or userdata objects"
msgstr ""

#, fuzzy
msgid ""
"Serializing 'A' and 'B' with different ``__serialize`` values brings "
"different results:"
msgstr ""
"Сериализация 'A' и' B' различными значениями ``__serialize`` приводит к "
"различным результатам:"

msgid ""
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- '[\"A\",\"B\"]'\n"
"...\n"
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"map\"}))\n"
"---\n"
"- '{\"1\":\"A\",\"2\":\"B\"}'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { "
"__serialize=\"map\"})})\n"
"---\n"
"- '[{\"f2\":\"B\",\"f1\":\"A\"}]'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { "
"__serialize=\"seq\"})})\n"
"---\n"
"- '[[]]'\n"
"..."
msgstr ""
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- '[\"A\",\"B\"]'\n"
"...\n"
"tarantool> json.encode(setmetatable({'A', 'B'}, { __serialize=\"map\"}))\n"
"---\n"
"- '{\"1\":\"A\",\"2\":\"B\"}'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { "
"__serialize=\"map\"})})\n"
"---\n"
"- '[{\"f2\":\"B\",\"f1\":\"A\"}]'\n"
"...\n"
"tarantool> json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { "
"__serialize=\"seq\"})})\n"
"---\n"
"- '[[]]'\n"
"..."

#, fuzzy
msgid ""
"Set values that affect the behavior of :ref:`json.encode <json-encode>` "
"and :ref:`json.decode <json-decode>`."
msgstr ""
"Определяет значения, которые влияют на поведение :ref:`json.encode <json-"
"encode>` и :ref:`json.decode <json-decode>`."

#, fuzzy
msgid "The values are all either integers or boolean ``true``/``false``."
msgstr ""
"Задаются либо все целочисленные значения, либо все логические значения "
"``true``/``false`` (правда/ложь)."

msgid "Option"
msgstr ""

msgid "Default"
msgstr ""

msgid "``cfg.encode_max_depth``"
msgstr ""

msgid "128"
msgstr ""

msgid "Max recursion depth for encoding"
msgstr ""

msgid "``cfg.encode_deep_as_nil``"
msgstr ""

#, fuzzy
msgid "false"
msgstr "таблица"

msgid ""
"A flag saying whether to crop tables with nesting level deeper than "
"``cfg.encode_max_depth``. Not-encoded fields are replaced with one null. "
"If not set, too deep nesting is considered an error."
msgstr ""

#, fuzzy
msgid "``cfg.encode_invalid_numbers``"
msgstr "``cfg.encode_invalid_numbers`` (по умолчанию, true) -- разрешить nan и inf"

msgid "true"
msgstr ""

msgid "A flag saying whether to enable encoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.encode_number_precision``"
msgstr ""

msgid "14"
msgstr ""

msgid "Precision of floating point numbers"
msgstr ""

#, fuzzy
msgid "``cfg.encode_load_metatables``"
msgstr ""
"``cfg.encode_load_metatables`` (по умолчанию, false) -- загрузить "
"метатаблицы"

msgid ""
"A flag saying whether the serializer will follow :ref:`__serialize <json-"
"serialize>` metatable field"
msgstr ""

msgid "``cfg.encode_use_tostring``"
msgstr ""

msgid "A flag saying whether to use ``tostring()`` for unknown types"
msgstr ""

msgid "``cfg.encode_invalid_as_nil``"
msgstr ""

msgid "A flag saying whether use NULL for non-recognized types"
msgstr ""

msgid "``cfg.encode_sparse_convert``"
msgstr ""

msgid ""
"A flag saying whether to handle excessively sparse arrays as maps. See "
"detailed description :ref:`below <json-module_cfg_sparse>`."
msgstr ""

msgid "``cfg.encode_sparse_ratio``"
msgstr ""

msgid "2"
msgstr ""

msgid ""
"1/``encode_sparse_ratio`` is the permissible percentage of missing values"
" in a sparse array."
msgstr ""

msgid "``cfg.encode_sparse_safe``"
msgstr ""

msgid "10"
msgstr ""

msgid ""
"A limit ensuring that small Lua arrays are always encoded as sparse "
"arrays (instead of generating an error or encoding as a map)"
msgstr ""

#, fuzzy
msgid "``cfg.decode_invalid_numbers``"
msgstr "``cfg.decode_invalid_numbers`` (по умолчанию, true) -- разрешить nan и inf"

msgid "A flag saying whether to enable decoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.decode_save_metatables``"
msgstr ""

msgid "A flag saying whether to set metatables for all arrays and maps"
msgstr ""

msgid "``cfg.decode_max_depth``"
msgstr ""

msgid "Max recursion depth for decoding"
msgstr ""

msgid "**Sparse arrays features:**"
msgstr ""

msgid ""
"During encoding, the JSON encoder tries to classify a table into one of "
"four kinds:"
msgstr ""

msgid "map - at least one table index is not unsigned integer"
msgstr ""

msgid "regular array - all array indexes are available"
msgstr ""

msgid "sparse array - at least one array index is missing"
msgstr ""

msgid ""
"excessively sparse array - the number of values missing exceeds the "
"configured ratio"
msgstr ""

msgid ""
"An array is excessively sparse when **all** the following conditions are "
"met:"
msgstr ""

msgid "``encode_sparse_ratio`` > 0"
msgstr ""

msgid "``max(table)`` > ``encode_sparse_safe``"
msgstr ""

msgid "``max(table)`` > ``count(table)`` * ``encode_sparse_ratio``"
msgstr ""

msgid ""
"The JSON encoder will never consider an array to be excessively sparse "
"when ``encode_sparse_ratio = 0``. The ``encode_sparse_safe`` limit "
"ensures that small Lua arrays are always encoded as sparse arrays. By "
"default, attempting to encode an excessively sparse array will generate "
"an error. If ``encode_sparse_convert`` is set to ``true``, excessively "
"sparse arrays will be handled as maps."
msgstr ""

msgid "**json.cfg() example 1:**"
msgstr ""

#, fuzzy
msgid ""
"The following code will encode 0/0 as NaN (\"not a number\") and 1/0 as "
"Inf (\"infinity\"), rather than returning nil or an error message:"
msgstr ""
"Например, следующий код интерпретирует 0/0 как nan (\"не является "
"числом\"), а 1/0 -- как inf (\"бесконечность\"), вместо того, чтобы "
"вернуть nil или ошибку:"

msgid ""
"json = require('json')\n"
"json.cfg{encode_invalid_numbers = true}\n"
"x = 0/0\n"
"y = 1/0\n"
"json.encode({1, x, y, 2})"
msgstr ""
"json = require('json')\n"
"json.cfg{encode_invalid_numbers = true}\n"
"x = 0/0\n"
"y = 1/0\n"
"json.encode({1, x, y, 2})"

msgid "The result of the ``json.encode()`` request will look like this:"
msgstr "Результат запроса ``json.encode()`` будет следующим:"

msgid ""
"tarantool> json.encode({1, x, y, 2})\n"
"---\n"
"- '[1,nan,inf,2]\n"
"..."
msgstr ""
"tarantool> json.encode({1, x, y, 2})\n"
"---\n"
"- '[1,nan,inf,2]\n"
"..."

#, fuzzy
msgid "**json.cfg example 2:**"
msgstr "**Пример:**"

msgid ""
"To avoid generating errors on attempts to encode unknown data types as "
"userdata/cdata, you can use this code:"
msgstr ""

msgid ""
"tarantool> httpc = require('http.client').new()\n"
"---\n"
"...\n"
"\n"
"tarantool> json.encode(httpc.curl)\n"
"---\n"
"- error: unsupported Lua type 'userdata'\n"
"...\n"
"\n"
"tarantool> json.encode(httpc.curl, {encode_use_tostring=true})\n"
"---\n"
"- '\"userdata: 0x010a4ef2a0\"'\n"
"..."
msgstr ""

#, fuzzy
msgid ""
"To achieve the same effect for only one call to ``json.encode()`` (i.e. "
"without changing the configuration permanently), you can use "
"``json.encode({1, x, y, 2}, {encode_invalid_numbers = true})``."
msgstr ""
"Чтобы получить такой же эффект для одиночного вызова ``json.encode()`` "
"без постоянного изменения конфигурации, можно вызвать ``json.encode({1, "
"x, y, 2}, {encode_invalid_numbers = true})``."

#, fuzzy
msgid ""
"Similar configuration settings exist for :ref:`MsgPack <msgpack-cfg>` and"
" :ref:`YAML <yaml-cfg>`."
msgstr ""
"Такие параметры конфигурации применяются для формата JSON, для "
":ref:`MsgPack <msgpack-module>` и для :ref:`YAML <yaml-module>`."

msgid ""
"A value comparable to Lua \"nil\" which may be useful as a placeholder in"
" a tuple."
msgstr ""
"Значение, сопоставимое с нулевым значением \"nil\" в языке Lua, которое "
"можно использовать в качестве объекта-заполнителя в кортеже."

msgid ""
"-- When nil is assigned to a Lua-table field, the field is null\n"
"tarantool> {nil, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- When json.NULL is assigned to a Lua-table field, the field is "
"json.NULL\n"
"tarantool> {json.NULL, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- When json.NULL is assigned to a JSON field, the field is null\n"
"tarantool> json.encode({field2 = json.NULL, field1 = 'a', field3 = 'c'})\n"
"---\n"
"- '{\"field2\":null,\"field1\":\"a\",\"field3\":\"c\"}'\n"
"..."
msgstr ""
"-- Когда полю Lua-таблицы присваивается nil, это поле -- null\n"
"tarantool> {nil, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- Когда полю Lua-таблицы присваивается json.NULL, это поле --  json.NULL"
"\n"
"tarantool> {json.NULL, 'a', 'b'}\n"
"---\n"
"- - null\n"
"  - a\n"
"  - b\n"
"...\n"
"-- Когда JSON-полю присваивается json.NULL, это поле -- null\n"
"tarantool> json.encode({field2 = json.NULL, field1 = 'a', field3 = 'c'})\n"
"---\n"
"- '{\"field2\":null,\"field1\":\"a\",\"field3\":\"c\"}'\n"
"..."

#~ msgid "Set global flags"
#~ msgstr "Определение глобальных флагов"

#~ msgid "``__serialize=\"seq\"`` for an array"
#~ msgstr "``__serialize=\"seq\"`` для массива"

#~ msgid "``__serialize=\"map\"`` for a map"
#~ msgstr "``__serialize=\"map\"`` для ассоциативного массива"

#~ msgid ""
#~ "``cfg.encode_deep_as_nil`` (default is false) "
#~ "-- see :ref:`below <json-"
#~ "module.cfg_encode_deep_as_nil>`"
#~ msgstr ""
#~ "``cfg.encode_deep_as_nil`` ((по умолчанию, false)"
#~ " -- см. :ref:`ниже <json-"
#~ "module.cfg_encode_deep_as_nil>`"

#~ msgid ""
#~ "``cfg.encode_invalid_as_nil`` (default is false) "
#~ "-- use ``null`` for all unrecognizable"
#~ " types"
#~ msgstr ""
#~ "``cfg.encode_invalid_as_nil`` (по умолчанию, false)"
#~ " -- использовать ``null`` для всех "
#~ "нераспознаваемых типов"

#~ msgid ""
#~ "``cfg.encode_max_depth`` (default is 32) --"
#~ " maximum nesting depth in a structure"
#~ msgstr ""
#~ "``cfg.encode_max_depth`` (по умолчанию, 32) --"
#~ " максимальная глубина вложенности в "
#~ "структуре"

#~ msgid ""
#~ "``cfg.encode_number_precision`` (default is 14) "
#~ "-- maximum post-decimal digits"
#~ msgstr ""
#~ "``cfg.encode_number_precision`` (по умолчанию, 14)"
#~ " -- максимальное количество цифр в "
#~ "дробной части"

#~ msgid ""
#~ "``cfg.encode_sparse_convert`` (default is true) "
#~ "-- handle excessively sparse arrays as"
#~ " maps"
#~ msgstr ""
#~ "``cfg.encode_sparse_convert`` (по умолчанию, true)"
#~ " -- обрабатывать излишне разреженные "
#~ "массивы как ассоциативные массивы"

#~ msgid ""
#~ "``cfg.encode_sparse_ratio`` (default is 2) --"
#~ " how sparse an array can be"
#~ msgstr ""
#~ "``cfg.encode_sparse_ratio`` (по умолчанию, 2) "
#~ "-- допустимая разреженность массива"

#~ msgid ""
#~ "``cfg.encode_sparse_safe`` (default is 10) --"
#~ " how much can safely be sparse"
#~ msgstr ""
#~ "``cfg.encode_sparse_safe`` (по умолчанию, 10) "
#~ "-- безопасная разреженность массивы"

#~ msgid ""
#~ "``cfg.encode_use_tostring`` (default is false) "
#~ "-- use ``tostring`` for unrecognizable "
#~ "types"
#~ msgstr ""
#~ "``cfg.encode_use_tostring`` (по умолчанию, false)"
#~ " -- использовать ``tostring`` для "
#~ "нераспознаваемых типов"

#~ msgid "``cfg.decode_load_metatables`` (default is false) -- load metatables"
#~ msgstr ""
#~ "``cfg.encode_load_metatables`` (по умолчанию, false)"
#~ " -- загрузить метатаблицы"

#~ msgid ""
#~ "``cfg.decode_max_depth`` (default is 32) --"
#~ " maximum nesting depth in a structure"
#~ msgstr ""
#~ "``cfg.decode_max_depth`` (по умолчанию, 32) --"
#~ " максимальная глубина вложенности в "
#~ "структуре"

#~ msgid ""
#~ "``cfg.decode_save_metatables`` (default is true) "
#~ "-- like ``encode_load_metatables``"
#~ msgstr ""
#~ "``cfg.decode_save_metatables`` (по умолчанию, true)"
#~ " -- как ``encode_load_metatables``"

#~ msgid ""
#~ "``cfg.decode_sparse_convert`` (default is true) "
#~ "-- like ``encode_sparse_convert``"
#~ msgstr ""
#~ "``cfg.decode_save_metatables`` (по умолчанию, true)"
#~ " -- как ``encode_load_metatables``"

#~ msgid ""
#~ "``cfg.decode_use_tostring`` (default is false) "
#~ "-- use ``tostring`` for unrecognizable "
#~ "types"
#~ msgstr ""
#~ "``cfg.encode_use_tostring`` (по умолчанию, false)"
#~ " -- использовать ``tostring`` для "
#~ "нераспознаваемых типов"

#~ msgid ""
#~ "**Behavior change:** Before Tarantool version"
#~ " 1.10.4, if a nested structure was"
#~ " deeper than ``cfg.encode_max_depth``, the "
#~ "deeper levels were cropped (encoded as"
#~ " nil)."
#~ msgstr ""
#~ "**Поведение изменилось:** До версии 1.10.4 "
#~ "Tarantool'а, если глубина вложения структуры"
#~ " была больше, чем ``cfg.encode_max_depth``, "
#~ "более глубокие уровни обрезаются (кодируются"
#~ " как nil)."

#~ msgid ""
#~ "Now, the result is an error "
#~ "suggesting that ``cfg.encode_max_depth`` is "
#~ "not deep enough. To return to the"
#~ " old behavior, say ``cfg.encode_deep_as_nil "
#~ "= true``."
#~ msgstr ""
#~ "Теперь результатом станет ошибка с "
#~ "указанием недостаточной глубины "
#~ "``cfg.encode_max_depth``. Чтобы вернуть старое "
#~ "поведение системы, выполните "
#~ "``cfg.encode_deep_as_nil = true``."

#~ msgid "This option is ignored for ``YAML``."
#~ msgstr "Этот параметр не учитывается для ``YAML``."
