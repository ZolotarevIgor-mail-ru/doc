
msgid "Module `msgpack`"
msgstr "Модуль `msgpack`"

msgid "Overview"
msgstr "Общие сведения"

msgid ""
"The ``msgpack`` module takes strings in MsgPack_ format and decodes them,"
" or takes a series of non-MsgPack values and encodes them. Tarantool "
"makes heavy internal use of MsgPack because tuples in Tarantool are "
":ref:`stored <index-box_lua-vs-msgpack>` as MsgPack arrays."
msgstr ""
"Модуль ``msgpack`` берет строки в формате MsgPack_ и декодирует их или "
"берет ряд значений в ином формате и кодирует их в формат MsgPack. MsgPack"
" интенсивно используется в Tarantool'е, поскольку кортежи :ref:`хранятся "
"<index-box_lua-vs-msgpack>` в виде массивов в формате MsgPack."

msgid "Index"
msgstr "Указатель"

msgid "Below is a list of all ``msgpack`` functions and members."
msgstr "Ниже приведен перечень всех функций и элементов модуля ``msgpack``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

msgid ":ref:`msgpack.encode() <msgpack-encode>`"
msgstr ":ref:`msgpack.encode() <msgpack-encode>`"

msgid "Convert a Lua object to an MsgPack string"
msgstr "Конвертация Lua-объекта в MsgPack-строку"

msgid ":ref:`msgpack.decode() <msgpack-decode>`"
msgstr ":ref:`msgpack.decode() <msgpack-decode>`"

msgid "Convert a MsgPack string to a Lua object"
msgstr "Конвертация MsgPack-строки в Lua-объект"

msgid ":ref:`msgpack.decode_unchecked() <msgpack-decode_unchecked>`"
msgstr ":ref:`msgpack.decode_unchecked() <msgpack-decode_unchecked>`"

msgid ":ref:`msgpack.decode_array_header <msgpack-decode_array_header>`"
msgstr ":ref:`msgpack.decode_array_header <msgpack-decode_array_header>`"

msgid "Skip array header in a MsgPack string"
msgstr ""

#, fuzzy
msgid ":ref:`msgpack.decode_map_header <msgpack-decode_map_header>`"
msgstr ":ref:`msgpack.decode_unchecked() <msgpack-decode_unchecked>`"

msgid "Skip map header in a MsgPack string"
msgstr ""

msgid ":ref:`__serialize parameter <msgpack-serialize>`"
msgstr ""

msgid "Output structure specification"
msgstr ""

msgid ":ref:`msgpack.cfg <msgpack-cfg>`"
msgstr ":ref:`msgpack.cfg <msgpack-cfg>`"

msgid "Change configuration"
msgstr "Изменение конфигурации"

msgid ":ref:`msgpack.NULL <msgpack-null>`"
msgstr ":ref:`msgpack.NULL <msgpack-null>`"

msgid "Analog of Lua's \"nil\""
msgstr "Аналог \"nil\" в языке Lua "

msgid "Convert a Lua object to a MsgPack string."
msgstr "Конвертация Lua-объекта в MsgPack-строку."

msgid "Parameters"
msgstr "Параметры"

msgid "either a scalar value or a Lua table value."
msgstr "скалярное значение или значение из Lua-таблицы."

msgid "return"
msgstr "возвращает"

msgid "the original value reformatted as a MsgPack string."
msgstr "оригинальное значение, преобразованное в MsgPack-строку."

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "string"
msgstr "строка"

msgid "Convert a MsgPack string to a Lua object."
msgstr "Конвертация MsgPack-строки в Lua-объект."

msgid "a string formatted as MsgPack."
msgstr "строка в формате MsgPack."

msgid "where to start, minimum = 1, maximum = string length, default = 1."
msgstr ""
"откуда начинать, минимальное значение = 1, максимальное = длина строки, "
"по умолчанию = 1."

msgid ""
"(if ``msgpack_string`` is in valid MsgPack format) the original contents "
"of ``msgpack_string``, formatted as a Lua table, (otherwise) a scalar "
"value, such as a string or a number;"
msgstr ""
"(если ``msgpack_string`` в правильном MsgPack-формате) содержимое "
"``msgpack_string`` в формате Lua-таблицы, (в противном случае) скалярное "
"значение, строка или число;"

msgid ""
"\"next_start_position\". If ``decode`` stops after parsing as far as byte"
" N in ``msgpack_string``, then \"next_start_position\" will equal N + 1, "
"and ``decode(msgpack_string, next_start_position)`` will continue parsing"
" from where the previous ``decode`` stopped, plus 1. Normally ``decode`` "
"parses all of ``msgpack_string``, so \"next_start_position\" will equal "
"``string.len(msgpack_string)`` + 1."
msgstr ""
"\"next_start_position\". Если расшифровка ``decode`` останавливается "
"после разбора байта N в ``msgpack_string``, то \"next_start_position\" = "
"N + 1, а ``decode(msgpack_string, next_start_position)`` продолжит разбор"
" с места остановки предыдущего ``decode`` плюс 1. Как правило, ``decode``"
" разбирает всю строку ``msgpack_string``, поэтому \"next_start_position\""
" будет равняться ``string.len(msgpack_string)`` + 1."

msgid "table and number"
msgstr "таблица и число"

msgid ""
"Convert a MsgPack string to a Lua object. Because checking is skipped, "
"``decode_unchecked()`` can operate with string pointers to buffers which "
"``decode()`` cannot handle. For an example see the :ref:`buffer <buffer-"
"module>` module."
msgstr ""
"Конвертация MsgPack-строки в Lua-объект. Поскольку проверка не "
"проводится, ``decode_unchecked()`` может работать с указателями строки в "
"буфере в отличие от ``decode()``. Пример см. в модуле :ref:`buffer "
"<buffer-module>`."

msgid "the original contents formatted as a Lua table;"
msgstr "оригинальное содержание в формате Lua-таблицы;"

msgid "the number of bytes that were decoded."
msgstr "количество декодированных байтов."

msgid "lua object"
msgstr "Lua-объект."

msgid ""
"Call the mp_decode_array function in the `MsgPuck "
"<http://rtsisyk.github.io/msgpuck/>`_ library and return the array size "
"and a pointer to the first array component. A subsequent call to "
"``msgpack_decode`` can decode the component instead of the whole array."
msgstr ""

#, fuzzy
msgid "a pointer to a byte array formatted as MsgPack."
msgstr "строка в формате MsgPack."

msgid "a number greater than or equal to the string's length"
msgstr ""

#, fuzzy
msgid "the size of the array;"
msgstr "позиция последнего символа"

msgid "a pointer to after the array header."
msgstr ""

msgid ""
"-- Example of decode_array_header\n"
"-- Suppose we have the raw data '\\x93\\x01\\x02\\x03'.\n"
"-- \\x93 is MsgPack encoding for a header of a three-item array.\n"
"-- We want to skip it and decode the next three items.\n"
"msgpack=require('msgpack'); ffi=require('ffi')\n"
"x,y=msgpack.decode_array_header(ffi.cast('char*','\\x93\\x01\\x02\\x03'),4)"
"\n"
"a=msgpack.decode(y,1);b=msgpack.decode(y+1,1);c=msgpack.decode(y+2,1);\n"
"a,b,c\n"
"-- The result will be: 1,2,3."
msgstr ""

msgid ""
"Call the mp_decode_map function in the `MsgPuck "
"<http://rtsisyk.github.io/msgpuck/>`_ library and return the map size and"
" a pointer to the first map component. A subsequent call to "
"``msgpack_decode`` can decode the component instead of the whole map."
msgstr ""

msgid "a number greater than or equal to the byte array's length"
msgstr ""

#, fuzzy
msgid "the size of the map;"
msgstr "копия таблицы"

msgid "a pointer to after the map header."
msgstr ""

msgid ""
"-- Example of decode_map_header\n"
"-- Suppose we have the raw data '\\x81\\xa2\\x41\\x41\\xc3'.\n"
"-- \\x81 is MsgPack encoding for a header of a one-item map.\n"
"-- We want to skip it and decode the next map item.\n"
"msgpack=require('msgpack'); ffi=require('ffi')\n"
"x,y=msgpack.decode_map_header(ffi.cast('char*','\\x81\\xa2\\x41\\x41\\xc3'),5)"
"\n"
"a=msgpack.decode(y,3);b=msgpack.decode(y+3,1)\n"
"x,a,b\n"
"-- The result will be: 1,\"AA\", true."
msgstr ""

msgid "**__serialize parameter:**"
msgstr ""

msgid "The MsgPack output structure can be specified with ``__serialize``:"
msgstr "Структуру MsgPack-вывода можно указать с помощью ``__serialize``:"

msgid "'seq', 'sequence', 'array' - table encoded as an array"
msgstr ""

msgid "'map', 'mappping' - table encoded as a map"
msgstr ""

msgid ""
"function - the meta-method called to unpack serializable representation "
"of table, cdata or userdata objects"
msgstr ""

#, fuzzy
msgid ""
"Serializing 'A' and 'B' with different ``__serialize`` values brings "
"different results. To show this, here is a routine which encodes "
"``{'A','B'}`` both as an array and as a map, then displays each result in"
" hexadecimal."
msgstr ""
"Сериализация 'A' и' B' различными значениями ``__serialize`` приводит к "
"различным результатам. Чтобы показать различия, ниже приведена процедура "
"кодирования `{'A','B'}` в массив и в ассоциативный массив с выводом "
"каждого результата в виде шестнадцатеричного числа."

#, python-format
msgid ""
"function hexdump(bytes)\n"
"    local result = ''\n"
"    for i = 1, #bytes do\n"
"        result = result .. string.format(\"%x\", string.byte(bytes, i)) "
".. ' '\n"
"    end\n"
"    return result\n"
"end\n"
"\n"
"msgpack = require('msgpack')\n"
"m1 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"seq\"\n"
"                          }))\n"
"m2 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"map\"\n"
"                          }))\n"
"print('array encoding: ', hexdump(m1))\n"
"print('map encoding: ', hexdump(m2))"
msgstr ""
"function hexdump(bytes)\n"
"    local result = ''\n"
"    for i = 1, #bytes do\n"
"        result = result .. string.format(\"%x\", string.byte(bytes, i)) "
".. ' '\n"
"    end\n"
"    return result\n"
"end\n"
"\n"
"msgpack = require('msgpack')\n"
"m1 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"seq\"\n"
"                          }))\n"
"m2 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"map\"\n"
"                          }))\n"
"print('array encoding: ', hexdump(m1))\n"
"print('map encoding: ', hexdump(m2))"

msgid "**Result:**"
msgstr "**Результат:**"

msgid ""
"**array** encoding: 92 a1 41 a1 42\n"
"**map** encoding:   82 01 a1 41 02 a1 42"
msgstr ""
"**array** encoding: 92 a1 41 a1 42\n"
"**map** encoding:   82 01 a1 41 02 a1 42"

#, fuzzy
msgid ""
"The MsgPack `Specification page "
"<http://github.com/msgpack/msgpack/blob/master/spec.md>`_ explains that "
"the first encoding means:"
msgstr ""
"На странице спецификации MsgPack по ссылке Specification_ объясняется, "
"что значение первого результата кодирования:"

msgid "fixarray(2), fixstr(1), \"A\", fixstr(1), \"B\""
msgstr "fixarray(2), fixstr(1), \"A\", fixstr(1), \"B\""

msgid "and the second encoding means:"
msgstr "а значение второго результата кодирования:"

msgid "fixmap(2), key(1), fixstr(1), \"A\", key(2), fixstr(2), \"B\""
msgstr "fixmap(2), key(1), fixstr(1), \"A\", key(2), fixstr(2), \"B\""

msgid ""
"Here are examples for all the common types, with the Lua-table "
"representation on the left, with the MsgPack format name and encoding on "
"the right."
msgstr ""
"Ниже приведены примеры всех стандартных типов: слева отображение в "
"Lua-таблице, а справа -- имя и кодировка в формате MsgPack."

msgid "**Common Types and MsgPack Encodings**"
msgstr "**Стандартные типы в MsgPack-кодировке**"

msgid "{}"
msgstr "{}"

msgid "'fixmap' if metatable is 'map' = 80 otherwise 'fixarray' = 90"
msgstr ""
"'fixmap' = 80, если метатаблица -- ассоциативный массив 'map', в "
"противном случае, 'fixarray' = 90"

msgid "'a'"
msgstr "'a'"

msgid "'fixstr' = a1 61"
msgstr "'fixstr' = a1 61"

msgid "false"
msgstr "false"

msgid "'false' = c2"
msgstr "'false' = c2"

msgid "true"
msgstr "true"

msgid "'true' = c3"
msgstr "'true' = c3"

msgid "127"
msgstr "127"

msgid "'positive fixint' = 7f"
msgstr "'positive fixint' = 7f"

msgid "65535"
msgstr "65535"

msgid "'uint 16' = cd ff ff"
msgstr "'uint 16' = cd ff ff"

msgid "4294967295"
msgstr "4294967295"

msgid "'uint 32' = ce ff ff ff ff"
msgstr "'uint 32' = ce ff ff ff ff"

msgid "nil"
msgstr "nil"

msgid "'nil' = c0"
msgstr "'nil' = c0"

msgid "msgpack.NULL"
msgstr "msgpack.NULL"

msgid "same as nil"
msgstr "то же, что и nil"

msgid "[0] = 5"
msgstr "[0] = 5"

msgid ""
"'fixmap(1)' + 'positive fixint' (for the key) + 'positive fixint' (for "
"the value) = 81 00 05"
msgstr ""
"'fixmap(1)' + 'positive fixint' (для ключа) + 'positive fixint' (для "
"значения) = 81 00 05"

msgid "[0] = nil"
msgstr "[0] = nil"

msgid "'fixmap(0)' = 80 -- nil is not stored when it is a missing map value"
msgstr ""
"'fixmap(0)' = 80 -- nil не хранится, если это отсутствующее значение "
"ассоциативного массива"

msgid "1.5"
msgstr "1,5"

msgid "'float 64' = cb 3f f8 00 00 00 00 00 00"
msgstr "'float 64' = cb 3f f8 00 00 00 00 00 00"

msgid "Some MsgPack configuration settings can be changed."
msgstr ""

msgid "The values are all either integers or boolean ``true``/``false``."
msgstr ""

msgid "Option"
msgstr ""

msgid "Default"
msgstr ""

msgid "``cfg.encode_max_depth``"
msgstr ""

#, fuzzy
msgid "128"
msgstr "127"

msgid "Max recursion depth for encoding"
msgstr ""

msgid "``cfg.encode_deep_as_nil``"
msgstr ""

msgid ""
"A flag saying whether to crop tables with nesting level deeper than "
"``cfg.encode_max_depth``. Not-encoded fields are replaced with one null. "
"If not set, too high nesting is considered an error."
msgstr ""

msgid "``cfg.encode_invalid_numbers``"
msgstr ""

msgid "A flag saying whether to enable encoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.encode_load_metatables``"
msgstr ""

msgid ""
"A flag saying whether the serializer will follow :ref:`__serialize <json-"
"serialize>` metatable field"
msgstr ""

msgid "``cfg.encode_use_tostring``"
msgstr ""

msgid "A flag saying whether to use ``tostring()`` for unknown types"
msgstr ""

msgid "``cfg.encode_invalid_as_nil``"
msgstr ""

msgid "A flag saying whether to use NULL for non-recognized types"
msgstr ""

msgid "``cfg.encode_sparse_convert``"
msgstr ""

msgid ""
"A flag saying whether to handle excessively sparse arrays as maps. See "
"detailed description :ref:`below <msgpack-cfg_sparse>`"
msgstr ""

msgid "``cfg.encode_sparse_ratio``"
msgstr ""

msgid "2"
msgstr ""

msgid ""
"1/``encode_sparse_ratio`` is the permissible percentage of missing values"
" in a sparse array"
msgstr ""

msgid "``cfg.encode_sparse_safe``"
msgstr ""

msgid "10"
msgstr ""

msgid ""
"A limit ensuring that small Lua arrays are always encoded as sparse "
"arrays (instead of generating an error or encoding as a map)"
msgstr ""

msgid "``cfg.decode_invalid_numbers``"
msgstr ""

msgid "A flag saying whether to enable decoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.decode_save_metatables``"
msgstr ""

msgid "A flag saying whether to set metatables for all arrays and maps"
msgstr ""

msgid "**Sparse arrays features:**"
msgstr ""

msgid ""
"During encoding, the MsgPack encoder tries to classify tables into one of"
" four kinds:"
msgstr ""

msgid "map - at least one table index is not unsigned integer"
msgstr ""

msgid "regular array - all array indexes are available"
msgstr ""

msgid "sparse array - at least one array index is missing"
msgstr ""

msgid ""
"excessively sparse array - the number of values missing exceeds the "
"configured ratio"
msgstr ""

msgid ""
"An array is excessively sparse when **all** the following conditions are "
"met:"
msgstr ""

msgid "``encode_sparse_ratio`` > 0"
msgstr ""

msgid "``max(table)`` > ``encode_sparse_safe``"
msgstr ""

msgid "``max(table)`` > ``count(table)`` * ``encode_sparse_ratio``"
msgstr ""

msgid ""
"MsgPack encoder will never consider an array to be excessively sparse "
"when ``encode_sparse_ratio = 0``. The ``encode_sparse_safe`` limit "
"ensures that small Lua arrays are always encoded as sparse arrays. By "
"default, attempting to encode an excessively sparse array will generate "
"an error. If ``encode_sparse_convert`` is set to ``true``, excessively "
"sparse arrays will be handled as maps."
msgstr ""

msgid "**msgpack.cfg() example 1:**"
msgstr ""

#, fuzzy
msgid ""
"If ``msgpack.cfg.encode_invalid_numbers = true`` (the default), then NaN "
"and Inf are legal values. If that is not desirable, then ensure that "
"``msgpack.encode()`` will not accept them, by saying "
"``msgpack.cfg{encode_invalid_numbers = false}``, thus:"
msgstr ""
"Например, если ``msgpack.cfg.encode_invalid_numbers = true`` (по "
"умолчанию), то допускаются значения nan и inf. Если это нежелательно, "
"следует убедиться, что ``msgpack.encode()`` не примет такие значения, "
"выполнив ``msgpack.cfg{encode_invalid_numbers = false}``. Таким образом:"

#, fuzzy
msgid ""
"tarantool> msgpack = require('msgpack'); "
"msgpack.cfg{encode_invalid_numbers = true}\n"
"---\n"
"...\n"
"tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
"---\n"
"- [1, -nan, inf, false]\n"
"- 22\n"
"...\n"
"tarantool> msgpack.cfg{encode_invalid_numbers = false}\n"
"---\n"
"...\n"
"tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
"---\n"
"- error: ... number must not be NaN or Inf'\n"
"..."
msgstr ""
" tarantool> msgpack = require('msgpack'); "
"msgpack.cfg{encode_invalid_numbers = true}\n"
" ---\n"
" ...\n"
" tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
" ---\n"
" - [1, -nan, inf, false]\n"
" - 22\n"
" ...\n"
" tarantool> msgpack.cfg{encode_invalid_numbers = false}\n"
"---\n"
"...\n"
" tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
" ---\n"
" - error: ... number must not be NaN or Inf'\n"
"..."

msgid "**msgpack.cfg example 2:**"
msgstr ""

msgid ""
"To avoid generating errors on attempts to encode unknown data types as "
"userdata/cdata, you can use this code:"
msgstr ""

msgid ""
"tarantool> httpc = require('http.client').new()\n"
"---\n"
"...\n"
"\n"
"tarantool> msgpack.encode(httpc.curl)\n"
"---\n"
"- error: unsupported Lua type 'userdata'\n"
"...\n"
"\n"
"tarantool> msgpack.encode(httpc.curl, {encode_use_tostring=true})\n"
"---\n"
"- '\"userdata: 0x010a4ef2a0\"'\n"
"..."
msgstr ""

msgid ""
"To achieve the same effect for only one call to ``msgpack.encode()`` "
"(i.e. without changing the configuration permanently), you can use "
"``msgpack.encode({1, x, y, 2}, {encode_invalid_numbers = true})``."
msgstr ""

msgid ""
"Similar configuration settings exist for :ref:`JSON <json-module_cfg>` "
"and :ref:`YAML <yaml-cfg>`."
msgstr ""

msgid ""
"A value comparable to Lua \"nil\" which may be useful as a placeholder in"
" a tuple."
msgstr ""
"Значение, сопоставимое с нулевым значением \"nil\" в языке Lua, которое "
"можно использовать в качестве объекта-заполнителя в кортеже."

#, fuzzy
msgid "**Example**"
msgstr "Пример"

msgid ""
"tarantool> msgpack = require('msgpack')\n"
"---\n"
"...\n"
"tarantool> y = msgpack.encode({'a',1,'b',2})\n"
"---\n"
"...\n"
"tarantool> z = msgpack.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> box.space.tester:insert{20, msgpack.NULL, 20}\n"
"---\n"
"- [20, null, 20]\n"
"..."
msgstr ""
"tarantool> msgpack = require('msgpack')\n"
"---\n"
"...\n"
"tarantool> y = msgpack.encode({'a',1,'b',2})\n"
"---\n"
"...\n"
"tarantool> z = msgpack.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> box.space.tester:insert{20, msgpack.NULL, 20}\n"
"---\n"
"- [20, null, 20]\n"
"..."

#~ msgid "``__serialize = \"seq\" or \"sequence\"`` for an array"
#~ msgstr "``__serialize = \"seq\" или \"sequence\"`` для массива"

#~ msgid "``__serialize = \"map\" or \"mapping\"`` for a map"
#~ msgstr "``__serialize = \"map\" или \"mapping\"`` для ассоциативного массива"

#~ msgid ""
#~ "Some MsgPack configuration settings can "
#~ "be changed, in the same way that"
#~ " they can be changed for json. "
#~ "See :ref:`Module JSON <json-module_cfg>` "
#~ "for a list of some configuration "
#~ "settings. (The same configuration settings "
#~ "exist for json, for MsgPack, and "
#~ "for  :ref:`YAML <yaml-module>`.)"
#~ msgstr ""
#~ "Некоторые параметры конфигурации MsgPack для"
#~ " кодировки можно изменить так же, как"
#~ " и для JSON. Список некоторых "
#~ "настроек см. в :ref:`Модуле JSON "
#~ "<json-module_cfg>`. (Такие параметры конфигурации"
#~ " применяются для формата JSON, для "
#~ ":ref:`MsgPack <msgpack-module>` и для "
#~ ":ref:`YAML <yaml-module>`.)"
