
msgid "Cartridge Command Line Interface"
msgstr ""

msgid "Contents"
msgstr ""

msgid ":ref:`Installation <installation>`"
msgstr ""

msgid ""
":ref:`RPM package (CentOS, Fedora, ALT Linux) <rpm-package-centos-fedora-"
"alt-linux>`"
msgstr ""

msgid ":ref:`DEB package (Debian, Ubuntu) <deb-package-debian-ubuntu>`)"
msgstr ""

msgid ":ref:`Homebrew (MacOS) <homebrew-macos>`"
msgstr ""

msgid ":ref:`From luarocks <from-luarocks>`"
msgstr ""

msgid ":ref:`Usage <usage>`"
msgstr ""

msgid ":ref:`An application's lifecycle <an-applications-lifecycle>`"
msgstr ""

msgid ""
":ref:`Creating an application from template <creating-an-application-"
"from-template>`"
msgstr ""

msgid ":ref:`Building an application <building-an-application>`"
msgstr ""

msgid ""
":ref:`Starting/stopping an application locally <startingstopping-an-"
"application-locally>`"
msgstr ""

msgid ":ref:`Packing an application <packing-an-application>`"
msgstr ""

msgid ":ref:`TGZ <tgz>`"
msgstr ""

msgid ":ref:`RPM and DEB <rpm-and-deb>`"
msgstr ""

msgid ":ref:`Docker <docker>`"
msgstr ""

msgid ":ref:`Special files <special-files>`"
msgstr ""

msgid ":ref:`Misc <misc>`"
msgstr ""

msgid ":ref:`Running end-to-end tests <running-end-to-end-tests>`"
msgstr ""

msgid "Installation"
msgstr ""

msgid "RPM package (CentOS, Fedora, ALT Linux)"
msgstr ""

msgid ""
"# Select a Tarantool version (copy one of these lines):\n"
"TARANTOOL_VERSION=1_10\n"
"TARANTOOL_VERSION=2x\n"
"TARANTOOL_VERSION=2_2\n"
"\n"
"# Set up the Tarantool packages repository:\n"
"curl -s "
"https://packagecloud.io/install/repositories/tarantool/$TARANTOOL_VERSION/script.rpm.sh"
" | sudo bash\n"
"\n"
"# Install the package:\n"
"sudo yum install cartridge-cli\n"
"\n"
"# Check the installation:\n"
"cartridge --version"
msgstr ""

msgid "DEB package (Debian, Ubuntu)"
msgstr ""

msgid ""
"# Select a Tarantool version (copy one of these lines):\n"
"TARANTOOL_VERSION=1_10\n"
"TARANTOOL_VERSION=2x\n"
"TARANTOOL_VERSION=2_2\n"
"\n"
"# Set up the Tarantool packages repository:\n"
"curl -s "
"https://packagecloud.io/install/repositories/tarantool/$TARANTOOL_VERSION/script.deb.sh"
" | sudo bash\n"
"\n"
"# Install the package:\n"
"sudo apt-get install cartridge-cli\n"
"\n"
"# Check the installation:\n"
"cartridge --version"
msgstr ""

msgid "Homebrew (MacOS)"
msgstr ""

msgid ""
"brew install cartridge-cli\n"
"\n"
"# Check the installation:\n"
"cartridge --version"
msgstr ""

msgid "From luarocks"
msgstr ""

msgid ""
"To install `cartridge-cli` to the application's directory (installed "
"`Tarantool <https://www.tarantool.io/download/>`_ is required):"
msgstr ""

msgid "tarantoolctl rocks install cartridge-cli"
msgstr ""

msgid ""
"The executable will be available at `.rocks/bin/cartridge`. Optionally, "
"you can add `.rocks/bin` to the executable path:"
msgstr ""

msgid "export PATH=$PWD/.rocks/bin/:$PATH"
msgstr ""

msgid "Usage"
msgstr ""

msgid "For more details, say:"
msgstr ""

msgid "cartridge --help"
msgstr ""

msgid "These commands are supported:"
msgstr ""

msgid "`create` - create a new application from template;"
msgstr ""

msgid "`build` - build the application for local development and testing;"
msgstr ""

msgid "`start` - start a Tarantool instance(s);"
msgstr ""

msgid "`stop` - stop a Tarantool instance(s);"
msgstr ""

msgid "`pack` - pack the application into a distributable bundle."
msgstr ""

msgid "An application's lifecycle"
msgstr ""

msgid "In a nutshell:"
msgstr ""

msgid ""
":ref:`Create <creating-an-application-from-template>` an application "
"(e.g. `myapp`) from template:"
msgstr ""

msgid ""
"cartridge create --name myapp\n"
"cd ./myapp"
msgstr ""

msgid ""
":ref:`Build <building-an-application>` the application for local "
"development and :ref:`testing <running-end-to-end-tests>`:"
msgstr ""

msgid "cartridge build"
msgstr ""

msgid ":ref:`Run <startingstopping-an-application-locally>` instances locally:"
msgstr ""

msgid ""
"cartridge start\n"
"cartridge stop"
msgstr ""

msgid ""
":ref:`Pack <packing-an-application>` the application into a distributable"
" (e.g. into an RPM package):"
msgstr ""

msgid "cartridge pack rpm"
msgstr ""

msgid "Creating an application from template"
msgstr ""

msgid ""
"To create an application from the Cartridge template, say this in any "
"directory:"
msgstr ""

msgid "cartridge create --name <app_name> /path/to/"
msgstr ""

msgid ""
"This will create a simple Cartridge application in the "
"`/path/to/<app_name>/` directory with:"
msgstr ""

msgid "one custom role with an HTTP endpoint;"
msgstr ""

msgid "sample tests and basic test helpers;"
msgstr ""

msgid "files required for development (like `.luacheckrc`)."
msgstr ""

msgid ""
"If you have `git` installed, this will also set up a Git repository with "
"the initial commit, tag it with `version "
"<https://www.tarantool.io/en/doc/latest/book/cartridge/cartridge_dev"
"/#application-versioning>`_ 0.1.0, and add a `.gitignore` file to the "
"project root."
msgstr ""

msgid "Let's take a closer look at the files inside the `<app_name>/` directory:"
msgstr ""

msgid "application files:"
msgstr ""

msgid ""
"`app/roles/custom-role.lua` a sample `custom role "
"<https://www.tarantool.io/en/doc/latest/book/cartridge/cartridge_dev"
"/#cluster-roles>`_ with simple HTTP API; can be enabled as "
"`app.roles.custom`"
msgstr ""

msgid ""
"`<app_name>-scm-1.rockspec` file where you can specify application "
"dependencies"
msgstr ""

msgid "`init.lua` file which is the entry point for your application"
msgstr ""

msgid ""
":ref:`special files <special-files>` (used to build and pack the "
"application):"
msgstr ""

msgid "`cartridge.pre-build`"
msgstr ""

msgid "`cartridge.post-build`"
msgstr ""

msgid "`Dockerfile.build.cartridge`"
msgstr ""

msgid "`Dockerfile.cartridge`"
msgstr ""

msgid "development files:"
msgstr ""

msgid ""
"`deps.sh` script that resolves the dependencies from the `.rockspec` file"
" and installs test dependencies (like `luatest`)"
msgstr ""

msgid ""
"`instances.yml` file with instances configuration (used by `cartridge "
"start`)"
msgstr ""

msgid ""
"`.cartridge.yml` file with Cartridge configuration (used by `cartridge "
"start`)"
msgstr ""

msgid ""
"`tmp` directory for temporary files (used as a run dir, see "
"`.cartridge.yml`)"
msgstr ""

msgid "`.git` file necessary for a Git repository"
msgstr ""

msgid "`.gitignore` file where you can specify the files for Git to ignore"
msgstr ""

msgid ""
"`env.lua` file that sets common rock paths so that the application can be"
" started from any directory."
msgstr ""

msgid "test files (with sample tests):"
msgstr ""

msgid ""
"test\n"
"├── helper\n"
"│   ├── integration.lua\n"
"│   └── unit.lua\n"
"│   ├── helper.lua\n"
"│   ├── integration\n"
"│   │   └── api_test.lua\n"
"│   └── unit\n"
"│       └── sample_test.lua"
msgstr ""

msgid "configuration files:"
msgstr ""

msgid "`.luacheckrc`"
msgstr ""

msgid "`.luacov`"
msgstr ""

msgid "`.editorconfig`"
msgstr ""

msgid "Building an application"
msgstr ""

msgid "Building locally"
msgstr ""

msgid ""
"To build your application locally (for local testing), say this in any "
"directory:"
msgstr ""

msgid "cartridge build [<path>]"
msgstr ""

msgid ""
"This command requires one argument -- the path to your application "
"directory (i.e. to the build source). The default path is `.` (the "
"current directory)."
msgstr ""

msgid "This command runs:"
msgstr ""

msgid ""
"`cartridge.pre-build` (or [DEPRECATED] `.cartridge.pre`), if the :ref"
":`pre-build file <special-files>` exists. This builds the application in "
"the `path` directory."
msgstr ""

msgid ""
"`tarantoolctl rocks make`, if the :ref:`rockspec file <special-files>` "
"exists. This installs all Lua rocks to the `path` directory."
msgstr ""

msgid ""
"During step 1 of the `cartridge build` command, `cartridge` builds the "
"application inside the application directory -- unlike when building the "
"application as part of the `cartridge pack` command, when the application"
" is built in a temporary :ref:`build directory <build-directory>` and no "
"build artifacts remain in the application directory."
msgstr ""

msgid ""
"During step 2 -- the key step here -- `cartridge` installs all "
"dependencies specified in the rockspec file (you can find this file "
"within the application directory created from template)."
msgstr ""

msgid ""
"**NOTE:** An advanced alternative would be to specify build logic in the "
"rockspec as `cmake` commands, like we `do it "
"<https://github.com/tarantool/cartridge/blob/master/cartridge-"
"scm-1.rockspec#L26>`_. for `cartridge`."
msgstr ""

msgid ""
"If your application depends on closed-source rocks, or if the build "
"should contain rocks from a project added as a submodule, then you need "
"to **install** all these dependencies before calling `tarantoolctl rocks "
"make`. You can do it using the file `cartridge.pre-build` in your "
"application root (again, you can find this file within the application "
"directory created from template). In this file, you can specify all rocks"
" to build (e.g. `tarantoolctl rocks make --chdir ./third_party/proj`). "
"For details, see :ref:`special files <special-files>`."
msgstr ""

msgid ""
"As a result, in the application's `.rocks` directory you will get a fully"
" built application that you can start locally from the application's "
"directory."
msgstr ""

msgid "Building in Docker"
msgstr ""

msgid "By default, `cartridge build` is building an application locally."
msgstr ""

msgid ""
"However, if you build it in OS X, all rocks and executables in the "
"resulting package will be specific for OS X, so the application won't "
"work in Linux. To build an application in OS X and run it in Linux, call "
"`cartridge build` with the flag `--use-docker` and get the application "
"built in a Docker container."
msgstr ""

msgid ""
"This image is created similarly to the :ref:`build image <build-and-"
"runtime-images>` created during `cartridge pack`."
msgstr ""

msgid "Starting/stopping an application locally"
msgstr ""

msgid ""
"Now that the application is :ref:`built <building-an-application>`, you "
"can run it locally:"
msgstr ""

msgid "cartridge start [APP_NAME[.INSTANCE_NAME]] [options]"
msgstr ""

msgid "The options are:"
msgstr ""

msgid "`--script FILE` is the application's entry point. Defaults to:"
msgstr ""

msgid "TARANTOOL_SCRIPT,"
msgstr ""

msgid "or `./init.lua` when running from the app's directory,"
msgstr ""

msgid "or `:apps_path/:app_name/init.lua` in a multi-app environment."
msgstr ""

msgid ""
"`--apps-path PATH` is the path to the application directory when running "
"in a multi-app environment. Defaults to `/usr/share/tarantool`."
msgstr ""

msgid ""
"`--run-dir DIR` is the directory with pid and sock files. Defaults to "
"TARANTOOL_RUN_DIR or `/var/run/tarantool`."
msgstr ""

msgid ""
"`--cfg FILE` is the configuration file for Cartridge instances. Defaults "
"to TARANTOOL_CFG or `./instances.yml`."
msgstr ""

msgid ""
"`--daemonize / -d` starts the instance in background. With this option, "
"Tarantool also waits until the app's main script is finished. For "
"example, this is useful if `init.lua` requires time-consuming startup "
"from snapshot, and Tarantool waits for the startup to complete. This is "
"also useful if the app's main script generates errors, and Tarantool can "
"handle them."
msgstr ""

msgid ""
"The `cartridge start` command starts a `tarantool` instance with enforced"
" **environment variables**:"
msgstr ""

#, python-format
msgid ""
"TARANTOOL_INSTANCE_NAME\n"
"TARANTOOL_CFG\n"
"TARANTOOL_PID_FILE - %run_dir%/%instance_name%.pid\n"
"TARANTOOL_CONSOLE_SOCK - %run_dir%/%instance_name%.sock"
msgstr ""

msgid ""
"`cartridge.cfg()` uses `TARANTOOL_INSTANCE_NAME` to read the instance's "
"configuration from the file provided in `TARANTOOL_CFG`."
msgstr ""

msgid ""
"You can override default options for the `cartridge` command in "
"`./.cartridge.yml` or `~/.cartridge.yml`."
msgstr ""

msgid ""
"You can also override `.cartridge.yml` options in corresponding "
"environment variables (`TARANTOOL_*`)."
msgstr ""

msgid "Here is an example of `.cartridge.yml`:"
msgstr ""

msgid ""
"run_dir: tmp/run\n"
"cfg: cartridge.yml\n"
"apps_path: /usr/local/share/tarantool\n"
"script: init.lua"
msgstr ""

msgid ""
"When `APP_NAME` is not provided, it is parsed from the `./*.rockspec` "
"filename."
msgstr ""

msgid ""
"When `INSTANCE_NAME` is not provided, `cartridge` reads the `cfg` file "
"and starts all defined instances:"
msgstr ""

msgid ""
"# in the application directory\n"
"cartridge start # starts all instances\n"
"cartridge start .router_1 # start single instance\n"
"\n"
"# in a multi-application environment\n"
"cartridge start app_1 # starts all instances of app_1\n"
"cartridge start app_1.router_1 # start single instance"
msgstr ""

msgid "To stop one or more running instances, say:"
msgstr ""

msgid "cartridge stop [APP_NAME[.INSTANCE_NAME]] [options]"
msgstr ""

msgid "These options from the `start` command are supported:"
msgstr ""

msgid "`--run-dir DIR`"
msgstr ""

msgid "`--cfg FILE`"
msgstr ""

msgid "Packing an application"
msgstr ""

msgid "To pack your application, say this in any directory:"
msgstr ""

msgid "cartridge pack [options] <type> [<path>]"
msgstr ""

msgid "where:"
msgstr ""

msgid ""
"`type` [REQUIRED] is the distribution type. The supported types are: "
"`rpm`, `tgz`, `docker`, `deb`. See details below."
msgstr ""

msgid ""
"**NOTE:** Yet another supported option is `rock`, but it's not "
"production-ready yet."
msgstr ""

msgid ""
"`path` [OPTIONAL] is the path to the application directory to pack. "
"Defaults to `.` (the current directory)."
msgstr ""

msgid ""
"`--name`(common for all distribution types) is the application name. It "
"coincides with the package name and the systemd-service name. The default"
" name comes from the `package` field in the rockspec file."
msgstr ""

msgid ""
"`--version` (common for all distribution types) is the application's "
"package version. The expected pattern is "
"`major.minor.patch[-count][-commit]`: if you specify `major.minor.patch`,"
" it is normalized to `major.minor.patch-count`. The default version is "
"determined as the result of `git describe --tags --long`. If the "
"application is not a git repository, you need to set the `--version` "
"option explicitly."
msgstr ""

msgid ""
"`--unit-template` (used for `rpm` и `deb`) is the path to the template "
"for the `systemd` unit file."
msgstr ""

msgid ""
"`--instantiated-unit-template` (used for `rpm` и `deb`) is the path to "
"the template for the `systemd` instantiated unit file."
msgstr ""

msgid ""
"`--from` (used for `docker`) is the path to the base Dockerfile of the "
"runtime image. Defaults to `Dockerfile.cartridge` in the application "
"root."
msgstr ""

msgid ""
"`--use-docker` (ignored for `docker`) forces to build the application in "
"Docker."
msgstr ""

msgid ""
"`--download-token` (common for all distribution types) is the download "
"token for Tarantool Enterprise. Alternatively, you can pass the token via"
" the `TARANTOOL_DOWNLOAD_TOKEN` environment variable (this variable is of"
" lower priority)."
msgstr ""

msgid ""
"`--tag` (used for `docker`) is the tag of the Docker image that results "
"from `pack docker`."
msgstr ""

msgid ""
"`--build-from` (used for `docker`) is the path to the base Dockerfile of "
"the build image. Defaults to `Dockerfile.build.cartridge` in the "
"application root."
msgstr ""

msgid ""
"`--sdk-local` (used for `docker`) is a flag that indicates if the SDK "
"from the local machine should be installed to the image."
msgstr ""

msgid ""
"`--sdk-path` (used for `docker`) is the path to the SDK to be installed "
"to the image. Alternatively, you can pass the path via the "
"`TARANTOOL_SDK_PATH` environment variable (this variable is of lower "
"priority)."
msgstr ""

msgid ""
"**Note:** For Tarantool Enterprise, you must specify one (and only one) "
"of the `--sdk-local` and `--sdk-path` options."
msgstr ""

msgid ""
"For `rpm`, `deb`, and `tgz`, we also deliver rocks modules and "
"executables specific for the system where the `cartridge pack` command is"
" running."
msgstr ""

msgid ""
"For `docker`, the resulting runtime image will contain rocks modules and "
"executables specific for the base image (`centos:8`)."
msgstr ""

msgid "The result will be named as `<name>-<version>.<type>`."
msgstr ""

msgid "Further on we dive deeper into the packaging process."
msgstr ""

msgid "Build directory"
msgstr ""

msgid ""
"The first step of the packaging process is to :ref:`build the application"
" <building-an-application>`."
msgstr ""

msgid ""
"By default, application build is done in a temporary directory in "
"`~/.cartridge/tmp/`, so the packaging process doesn't affect the contents"
" of your application directory."
msgstr ""

msgid ""
"You can specify a custom build directory for your application in the "
"`CARTRIDGE_BUILDDIR` environment variable. If this directory doesn't "
"exists, it will be created, used for building the application, and then "
"removed."
msgstr ""

msgid ""
"If you specify an existing directory in the `CARTRIDGE_BUILDDIR` "
"environment variable, the `CARTRIDGE_BUILDDIR/build.cartridge` repository"
" will be used for build and then removed. This directory will be cleaned "
"up before building the application."
msgstr ""

msgid "**NOTE:** The specified directory cannot be an application subdirectory."
msgstr ""

msgid "Distribution directory"
msgstr ""

msgid ""
"For each distribution type, a temporary directory with application source"
" files is created (further on we address it as *application directory*). "
"This includes 3 stages."
msgstr ""

msgid "Stage 1. Cleaning up the application directory"
msgstr ""

msgid "On this stage, some files are filtered out of the application directory:"
msgstr ""

msgid ""
"First, `git clean -X -d -f` removes all untracked and ignored files (it "
"works for submodules, too)."
msgstr ""

msgid "After that, `.rocks` and `.git` directories are removed."
msgstr ""

msgid ""
"Files permissions are preserved, and the code files owner is set to "
"`root:root` in the resulting package."
msgstr ""

msgid ""
"**Note**: All application files should have at least `a+r` permissions "
"(`a+rx` for directories). Otherwise, `cartridge pack` command raises an "
"error."
msgstr ""

msgid "Stage 2. Building the application"
msgstr ""

msgid ""
"On this stage, `cartridge` :ref:`builds <building-an-application>` the "
"application in the cleaned up application directory."
msgstr ""

msgid "Stage 3. Cleaning up the files before packing"
msgstr ""

msgid ""
"On this stage, `cartridge` runs `cartridge.post-build` (if it exists) to "
"remove junk files (like `node_modules`) generated during application "
"build."
msgstr ""

msgid ""
"See an :ref:`example <example-cartridgepost-build>` in :ref:`special "
"files <special-files>`."
msgstr ""

msgid "TGZ"
msgstr ""

msgid ""
"`cartridge pack tgz ./myapp` creates a .tgz archive. It contains all "
"files from the :ref:`distribution directory <distribution-directory>` "
"(i.e. the application source code and rocks modules described in the "
"application rockspec)."
msgstr ""

msgid "The package name is `<name>-<version>.tar.gz`."
msgstr ""

msgid "RPM and DEB"
msgstr ""

msgid "`cartridge pack rpm|deb ./myapp` creates an RPM or DEB package."
msgstr ""

msgid "The package name is `<name>-<version>.{rpm,deb}`."
msgstr ""

msgid ""
"It contains meta information: the package name (which is the application "
"name), and the package version."
msgstr ""

msgid ""
"If you use an opensource version of Tarantool, the package has a "
"`tarantool` dependency (version >= `<major>.<minor>` and < `<major+1>`, "
"where `<major>.<minor>` is the version of Tarantool used for packing the "
"application). You should enable the Tarantool repo to allow your package "
"manager install this dependency correctly:"
msgstr ""

msgid "for RPM:"
msgstr ""

msgid ""
"curl -s \\\n"
"        "
"https://packagecloud.io/install/repositories/tarantool/${tarantool_repo_version}/script.rpm.sh"
" | bash \\\n"
"    && yum -y install tarantool tarantool-devel"
msgstr ""

msgid "for DEB:"
msgstr ""

msgid ""
"curl -s \\\n"
"        "
"https://packagecloud.io/install/repositories/tarantool/${tarantool_repo_version}/script.deb.sh"
" | bash \\\n"
"    && apt-get -y install tarantool"
msgstr ""

msgid "The package contents is as follows:"
msgstr ""

msgid ""
"the contents of the distribution directory, placed in the "
"`/usr/share/tarantool/<app_name>` directory (for Tarantool Enterprise, "
"this directory also contains `tarantool` and `tarantoolctl` binaries);"
msgstr ""

msgid ""
"unit files for running the application as a `systemd` service: "
"`/etc/systemd/system/${name}.service` and "
"`/etc/systemd/system/${name}@.service`;"
msgstr ""

msgid ""
"the file `/usr/lib/tmpfiles.d/<name>.conf` that allows the instance to "
"restart after server restart."
msgstr ""

msgid "These directories are created:"
msgstr ""

msgid "`/etc/tarantool/conf.d/` - directory for instances configuration;"
msgstr ""

msgid "`/var/lib/tarantool/` - directory to store instances snapshots;"
msgstr ""

msgid "`/var/run/tarantool/` - directory to store PID-files and console sockets."
msgstr ""

msgid ""
"See the `manual "
"<https://www.tarantool.io/en/doc/2.2/book/cartridge/cartridge_dev"
"/#deploying-an-application>`_ for details about deploying a Tarantool "
"Cartridge application."
msgstr ""

msgid "To start the `instance-1` instance of the `myapp` service, say:"
msgstr ""

msgid "systemctl start myapp@instance-1"
msgstr ""

msgid ""
"This instance will look for its `configuration "
"<https://www.tarantool.io/en/doc/latest/book/cartridge/cartridge_dev"
"/#configuring-instances>`_ across all sections of the YAML file(s) stored"
" in `/etc/tarantool/conf.d/*`."
msgstr ""

msgid ""
"Use the options `--unit-template` and `--instantiated-unit-template` to "
"customize standard unit files."
msgstr ""

msgid ""
"**NOTE:** You may need it first of all for DEB packages, if your build "
"platform is different from the deployment platform. In this case, "
"`ExecStartPre` may contain an incorrect path to `mkdir`. As a hotfix, we "
"suggest customizing the unit files."
msgstr ""

msgid "Example of an instantiated unit file:"
msgstr ""

#, python-format
msgid ""
"[Unit]\n"
"Description=Tarantool Cartridge app ${name}@%i\n"
"After=network.target\n"
"\n"
"[Service]\n"
"Type=simple\n"
"ExecStartPre=/bin/sh -c 'mkdir -p ${workdir}.default'\n"
"ExecStart=${bindir}/tarantool ${dir}/init.lua\n"
"User=tarantool\n"
"Group=tarantool\n"
"\n"
"Environment=TARANTOOL_WORKDIR=${workdir}.%i\n"
"Environment=TARANTOOL_CFG=/etc/tarantool/conf.d/\n"
"Environment=TARANTOOL_PID_FILE=/var/run/tarantool/${name}.%i.pid\n"
"Environment=TARANTOOL_CONSOLE_SOCK=/var/run/tarantool/${name}.%i.control\n"
"Environment=TARANTOOL_INSTANCE_NAME=%i"
msgstr ""

msgid "In this file, you can use the following environment variables:"
msgstr ""

msgid "`name` - the application name;"
msgstr ""

msgid ""
"`workdir` - path to the work directory (by default, "
"`/var/lib/tarantool/<name>`);"
msgstr ""

msgid "Docker"
msgstr ""

msgid ""
"`cartridge pack docker ./myapp` builds a Docker image where you can start"
" one instance of the application."
msgstr ""

msgid "Build and runtime images"
msgstr ""

msgid ""
"In fact, two images are created during the packing process: build image "
"and runtime image."
msgstr ""

msgid ""
"First, the build image is used to perform application build. The build "
"stages here are exactly the same as for other distribution types:"
msgstr ""

msgid ""
":ref:`Stage 1. Cleaning up the application directory <stage-1-cleaning-"
"up-the-application-directory>`"
msgstr ""

msgid ""
":ref:`Stage 2. Building the application <stage-2-building-the-"
"application>` (the build is always done :ref:`in Docker <building-in-"
"docker>`)"
msgstr ""

msgid ""
":ref:`Stage 3. Cleaning up the files before packaging <stage-3-cleaning-"
"up-the-files-before-packing>`"
msgstr ""

msgid ""
"Second, the files are copied to the resulting (runtime) image, similarly "
"to packing an application as an archive. This image is exactly the result"
" of running `cartridge pack docker`)."
msgstr ""

msgid "Both images are based on `centos:8`."
msgstr ""

msgid ""
"All packages required for the default  `cartridge` application build "
"(`git`, `gcc`, `make`, `cmake`, `unzip`) are installed on the build "
"image."
msgstr ""

msgid "A proper version of Tarantool is provided on the runtime image:"
msgstr ""

msgid ""
"For opensource, Tarantool of the same version as the one used for local "
"development is installed to the image."
msgstr ""

msgid ""
"For Tarantool Enterprise, the bundle with Tarantool Enterprise binaries "
"is copied to the image."
msgstr ""

msgid ""
"If your application requires some other applications for build or "
"runtime, you can specify base layers for build and runtime images:"
msgstr ""

msgid "build image: `Dockerfile.build.cartridge` (default) or `--build-from`;"
msgstr ""

msgid "runtime image: `Dockerfile.cartridge` (default) or `--from`."
msgstr ""

msgid ""
"The Dockerfile of the base image should be started with the `FROM "
"centos:8` line (except comments)."
msgstr ""

msgid ""
"For example, if your application requires `gcc-c++` for build and `zip` "
"for runtime, customize the Dockerfiles as follows:"
msgstr ""

msgid "`Dockerfile.cartridge.build`:"
msgstr ""

msgid ""
"FROM centos:8\n"
"RUN yum install -y gcc-c++\n"
"# Note that git, gcc, make, cmake, unzip packages\n"
"# will be installed anyway"
msgstr ""

msgid "`Dockerfile.cartridge`:"
msgstr ""

msgid ""
"FROM centos:8\n"
"RUN yum install -y zip"
msgstr ""

msgid "Runtime image tag"
msgstr ""

msgid "The runtime image is tagged as follows:"
msgstr ""

msgid "`<name>:<detected_version>`: by default;"
msgstr ""

msgid "`<name>:<version>`: if the `--version` parameter is specified;"
msgstr ""

msgid "`<tag>`: if the `--tag` parameter is specified."
msgstr ""

msgid "Tarantool Enterprise SDK"
msgstr ""

msgid ""
"If you use Tarantool Enterprise, you should explicitly specify the "
"Tarantool SDK to be delivered on the runtime image."
msgstr ""

msgid ""
"If you want to use the SDK from your local machine, just pass the `--sdk-"
"local` flag to the `cartridge pack docker` command."
msgstr ""

msgid ""
"Alternatively, you can specify a local path to another SDK using the "
"`--sdk-path` option (or the environment variable `TARANTOOL_SDK_PATH`, "
"which has lower priority)."
msgstr ""

msgid "Customizing the application build in Docker"
msgstr ""

msgid ""
"You can pass custom arguments for the `docker build` command via the "
"`TARANTOOL_DOCKER_BUILD_ARGS` environment variable. For example, "
"`TARANTOOL_DOCKER_BUILD_ARGS='--no-cache --quiet'`"
msgstr ""

msgid "Using the runtime image"
msgstr ""

msgid ""
"The application code is placed in the `/usr/share/tarantool/${app_name}` "
"directory. An opensource version of Tarantool is installed to the image."
msgstr ""

msgid ""
"The run directory is `/var/run/tarantool/${app_name}`, the workdir is "
"`/var/lib/tarantool/${app_name}`."
msgstr ""

msgid ""
"The runtime image also contains the file "
"`/usr/lib/tmpfiles.d/<name>.conf` that allows the instance to restart "
"after container restart."
msgstr ""

msgid "To start the `instance-1` instance of the `myapp` application, say:"
msgstr ""

msgid ""
"docker run -d \\\n"
"\n"
"                --name instance-1 \\\n"
"                -e TARANTOOL_INSTANCE_NAME=instance-1 \\\n"
"                -e TARANTOOL_ADVERTISE_URI=3302 \\\n"
"                -e TARANTOOL_CLUSTER_COOKIE=secret \\\n"
"                -e TARANTOOL_HTTP_PORT=8082 \\\n"
"                -p 127.0.0.1:8082:8082 \\\n"
"                myapp:1.0.0"
msgstr ""

msgid "By default, `TARANTOOL_INSTANCE_NAME` is set to `default`."
msgstr ""

msgid "To check the instance logs, say:"
msgstr ""

msgid "docker logs instance-1"
msgstr ""

msgid ""
"It is the user's responsibility to set up a proper advertise URI "
"(`<host>:<port>`) if the containers are deployed on different machines. "
"The problem here is that an instance's advertise URI must be the same on "
"all machines, because it will be used by all the other instances to "
"connect to this one. For example, if you start an instance with an "
"advertise URI set to `localhost:3302`, and then address it as `<instance-"
"host>:3302` from other instances, this won't work: the other instances "
"will be recognizing it only as `localhost:3302`."
msgstr ""

msgid ""
"If you specify only a port, `cartridge` will use an auto-detected IP, so "
"you need to configure Docker networks to set up inter-instance "
"communication."
msgstr ""

msgid ""
"You can use Docker volumes to store instance snapshots and xlogs on the "
"host machine. To start an image with a new application code, just stop "
"the old container and start a new one using the new image."
msgstr ""

msgid "Special files"
msgstr ""

msgid ""
"You can put these files in your application root to control the "
"application packaging process (see examples below):"
msgstr ""

msgid ""
"`cartridge.pre-build`: a script to be run before `tarantoolctl rocks "
"make`. The main purpose of this script is to build some non-standard "
"rocks modules (for example, from a submodule)."
msgstr ""

msgid ""
"`cartridge.post-build`: a script to be run after `tarantoolctl rocks "
"make`. The main purpose of this script is to remove build artifacts from "
"result package."
msgstr ""

msgid ""
"[DEPRECATED] `.cartridge.ignore`: here you can specify some files and "
"directories to be excluded from the package build. See the `manual "
"<https://www.tarantool.io/ru/doc/latest/book/cartridge/cartridge_dev"
"/#using-cartridge-ignore-files>`_ for details."
msgstr ""

msgid ""
"[DEPRECATED] `.cartridge.pre`: a script to be run before `tarantoolctl "
"rocks make`. The main purpose of this script is to build some non-"
"standard rocks modules (for example, from a submodule)."
msgstr ""

msgid "**NOTES**:"
msgstr ""

msgid "You can use any of these approaches (just take care not to mix them):"
msgstr ""

msgid "`cartridge.pre-build` + `cartridge.post-build`, or"
msgstr ""

msgid "[deprecated] `.cartridge.ignore` + `.cartridge.pre`."
msgstr ""

msgid ""
"Packing to a Docker image isn't compatible with the deprecated packaging "
"process."
msgstr ""

msgid "Example: cartridge.pre-build"
msgstr ""

msgid ""
"#!/bin/sh\n"
"\n"
"# The main purpose of this script is to build some non-standard rocks "
"modules.\n"
"# It will be ran before `tarantoolctl rocks make` on application build\n"
"\n"
"tarantoolctl rocks make --chdir ./third_party/my-custom-rock-module"
msgstr ""

msgid "Example: cartridge.post-build"
msgstr ""

msgid ""
"#!/bin/sh\n"
"\n"
"# The main purpose of this script is to remove build artifacts from "
"resulting package.\n"
"# It will be ran after `tarantoolctl rocks make` on application build.\n"
"\n"
"rm -rf third_party\n"
"rm -rf node_modules\n"
"rm -rf doc"
msgstr ""

msgid "Misc"
msgstr ""

msgid "Running end-to-end tests"
msgstr ""

msgid "./test-e2e.sh"
msgstr ""

#~ msgid ""
#~ "unit files for running the application"
#~ " as a `systemd` service: "
#~ "`/etc/systemd/system/${name}.service` and "
#~ "`/etc/systemd/system/${name}@.service`;"
#~ msgstr ""

#~ msgid ""
#~ "the file `/usr/lib/tmpfiles.d/<name>.conf` that "
#~ "allows the instance to restart after "
#~ "server restart."
#~ msgstr ""

#~ msgid ""
#~ "[Unit]\n"
#~ "Description=Tarantool Cartridge app ${name}@%i\n"
#~ "After=network.target\n"
#~ "\n"
#~ "[Service]\n"
#~ "Type=simple\n"
#~ "ExecStartPre=/bin/sh -c 'mkdir -p ${workdir}.default'\n"
#~ "ExecStart=${bindir}/tarantool ${dir}/init.lua\n"
#~ "User=tarantool\n"
#~ "Group=tarantool\n"
#~ "\n"
#~ "Environment=TARANTOOL_WORKDIR=${workdir}.%i\n"
#~ "Environment=TARANTOOL_CFG=/etc/tarantool/conf.d/\n"
#~ "Environment=TARANTOOL_PID_FILE=/var/run/tarantool/${name}.%i.pid\n"
#~ "Environment=TARANTOOL_CONSOLE_SOCK=/var/run/tarantool/${name}.%i.control"
#~ "\n"
#~ "Environment=TARANTOOL_INSTANCE_NAME=%i"
#~ msgstr ""

#~ msgid "`name` - the application name;"
#~ msgstr ""

#~ msgid ""
#~ "`workdir` - path to the work "
#~ "directory (by default, `/var/lib/tarantool/<name>`);"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`RPM package (CentOS, Fedora, ALT "
#~ "Linux) <rpm-package-centos-fedora-"
#~ "alt-linux>`"
#~ msgstr ""

#~ msgid ":ref:`DEB package (Debian, Ubuntu) <deb-package-debian-ubuntu>`)"
#~ msgstr ""

#~ msgid ":ref:`Homebrew (MacOS) <homebrew-macos>`"
#~ msgstr ""

#~ msgid ":ref:`From luarocks <from-luarocks>`"
#~ msgstr ""

#~ msgid "RPM package (CentOS, Fedora, ALT Linux)"
#~ msgstr ""

#~ msgid ""
#~ "# Select a Tarantool version (copy one of these lines):\n"
#~ "TARANTOOL_VERSION=1_10\n"
#~ "TARANTOOL_VERSION=2x\n"
#~ "TARANTOOL_VERSION=2_2\n"
#~ "\n"
#~ "# Set up the Tarantool packages repository:\n"
#~ "curl -s "
#~ "https://packagecloud.io/install/repositories/tarantool/$TARANTOOL_VERSION/script.rpm.sh"
#~ " | sudo bash\n"
#~ "\n"
#~ "# Install the package:\n"
#~ "sudo yum install cartridge-cli\n"
#~ "\n"
#~ "# Check the installation:\n"
#~ "cartridge --version"
#~ msgstr ""

#~ msgid ""
#~ "Now you can create and start your"
#~ " first application! Go to the "
#~ ":ref:`quick start <quick-start>` section "
#~ "and try it."
#~ msgstr ""

#~ msgid "DEB package (Debian, Ubuntu)"
#~ msgstr ""

#~ msgid ""
#~ "# Select a Tarantool version (copy one of these lines):\n"
#~ "TARANTOOL_VERSION=1_10\n"
#~ "TARANTOOL_VERSION=2x\n"
#~ "TARANTOOL_VERSION=2_2\n"
#~ "\n"
#~ "# Set up the Tarantool packages repository:\n"
#~ "curl -s "
#~ "https://packagecloud.io/install/repositories/tarantool/$TARANTOOL_VERSION/script.deb.sh"
#~ " | sudo bash\n"
#~ "\n"
#~ "# Install the package:\n"
#~ "sudo apt-get install cartridge-cli\n"
#~ "\n"
#~ "# Check the installation:\n"
#~ "cartridge --version"
#~ msgstr ""

#~ msgid "Homebrew (MacOS)"
#~ msgstr ""

#~ msgid ""
#~ "brew install cartridge-cli\n"
#~ "\n"
#~ "# Check the installation:\n"
#~ "cartridge --version"
#~ msgstr ""

#~ msgid "From luarocks"
#~ msgstr ""

#~ msgid ""
#~ "To install `cartridge-cli` to the "
#~ "application's directory (installed `Tarantool "
#~ "<https://www.tarantool.io/download/>`_ is required):"
#~ msgstr ""

#~ msgid "tarantoolctl rocks install cartridge-cli"
#~ msgstr ""

#~ msgid ""
#~ "The executable will be available at "
#~ "`.rocks/bin/cartridge`. Optionally, you can "
#~ "add `.rocks/bin` to the executable path:"
#~ msgstr ""

#~ msgid ""
#~ "Now you can create and start your"
#~ " first application! Go to the "
#~ ":ref:`next <quick-start>` section and "
#~ "try it."
#~ msgstr ""

#~ msgid ""
#~ "You can find more details in the"
#~ " :ref:`documentation <usage>` or start with"
#~ " our `getting started guide "
#~ "<https://github.com/tarantool/cartridge-cli/blob/master/examples"
#~ "/getting-started-app/README.md>`_."
#~ msgstr ""

#~ msgid ""
#~ "# in the application directory\n"
#~ "cartridge start # starts all instances\n"
#~ "cartridge start .router_1 # start single instance\n"
#~ "\n"
#~ "# in a multi-application environment\n"
#~ "cartridge start app_1 # starts all instances of app_1\n"
#~ "cartridge start app_1.router_1 # start single instance"
#~ msgstr ""

#~ msgid ":ref:`Quick start <quick-start>`"
#~ msgstr ""

#~ msgid "Install third-party software:"
#~ msgstr ""

#~ msgid ""
#~ "`Install <https://git-scm.com/book/en/v2/Getting-"
#~ "Started-Installing-Git>`_ `git`, a version"
#~ " control system."
#~ msgstr ""

#~ msgid ""
#~ "`Install <https://linuxize.com/post/how-to-unzip-"
#~ "files-in-linux/>`_ the `unzip` utility."
#~ msgstr ""

#~ msgid "`Install <https://gcc.gnu.org/install/>`_ the `gcc` compiler."
#~ msgstr ""

#~ msgid "`Install <https://cmake.org/install/>`_ the `cmake` and `make` tools."
#~ msgstr ""

#~ msgid "Install Tarantool 1.10 or higher."
#~ msgstr ""

#~ msgid "You can:"
#~ msgstr ""

#~ msgid ""
#~ "Install it from a package (see "
#~ "https://www.tarantool.io/en/download/ for OS-"
#~ "specific instructions)."
#~ msgstr ""

#~ msgid ""
#~ "Build it from sources (see "
#~ "https://www.tarantool.io/en/download/os-installation"
#~ "/building-from-source/)."
#~ msgstr ""

#~ msgid ""
#~ "*[On all platforms except MacOS X]* "
#~ "If you built Tarantool from sources, "
#~ "you need to manually set up the"
#~ " Tarantool packages repository:"
#~ msgstr ""

#~ msgid ""
#~ "curl -L https://tarantool.io/installer.sh | "
#~ "sudo -E bash -s -- --repo-only"
#~ msgstr ""

#~ msgid "Install the `cartridge-cli` package:"
#~ msgstr ""

#~ msgid "for CentOS, Fedora, ALT Linux (RPM package):"
#~ msgstr ""

#~ msgid ""
#~ "      sudo yum install cartridge-cli\n"
#~ "\n"
#~ "\n"
#~ "* for Debian, Ubuntu (DEB package):"
#~ msgstr ""

#~ msgid ""
#~ "      sudo apt-get install cartridge-cli\n"
#~ "\n"
#~ "\n"
#~ "* for MacOS X (Homebrew formula):"
#~ msgstr ""

#~ msgid ""
#~ "      brew install cartridge-cli\n"
#~ "\n"
#~ "\n"
#~ "* for any OS (from luarocks):"
#~ msgstr ""

#~ msgid ""
#~ "    tarantoolctl rocks install cartridge-cli\n"
#~ "\n"
#~ "\n"
#~ "This installs the rock to the application's directory.\n"
#~ "The executable is available at `.rocks/bin/cartridge`.\n"
#~ "Optionally, you can add `.rocks/bin` to the executable path:"
#~ msgstr ""

#~ msgid "Check the installation:"
#~ msgstr ""

#~ msgid "cartridge --version"
#~ msgstr ""

#~ msgid ""
#~ "Now you can `create and start "
#~ "<https://www.tarantool.io/en/doc/1.10/getting_started/getting_started_cartridge/>`_"
#~ " your first application!"
#~ msgstr ""

#~ msgid "Quick start"
#~ msgstr ""

#~ msgid "To create your first application:"
#~ msgstr ""

#~ msgid "cartridge create --name myapp"
#~ msgstr ""

#~ msgid "Let's go inside:"
#~ msgstr ""

#~ msgid "cd myapp"
#~ msgstr ""

#~ msgid "Now build the application and start it:"
#~ msgstr ""

#~ msgid ""
#~ "cartridge build\n"
#~ "cartridge start"
#~ msgstr ""

#~ msgid ""
#~ "That's all! You can visit "
#~ "http://localhost:8081 and see your application"
#~ " Admin Web UI:"
#~ msgstr ""

#~ msgid ""
#~ "You can find more details in the"
#~ " :ref:`documentation <usage>` or start with"
#~ " our `getting started guide "
#~ "<https://www.tarantool.io/en/doc/1.10/getting_started/getting_started_cartridge/>`_."
#~ msgstr ""

#~ msgid "`status` - get current instance(s) status;"
#~ msgstr ""

#~ msgid ""
#~ "`stateboard.init.lua` file which is the "
#~ "entry point for the application "
#~ "`stateboard "
#~ "<https://github.com/tarantool/cartridge/blob/master/topics/failover.md>`_"
#~ msgstr ""

#~ msgid ""
#~ "<!-- Please, update cmd_build usage in"
#~ " cartridge-cli.lua file on updating "
#~ "the doc -->"
#~ msgstr ""

#~ msgid ""
#~ "<!-- Please, update cmd_start usage in"
#~ " cartridge-cli.lua file on updating "
#~ "the doc -->"
#~ msgstr ""

#~ msgid ""
#~ "`--stateboard` starts the application "
#~ "stateboard as well as instances. "
#~ "Defaults to TARANTOOL_STATEBOARD or `false`."
#~ " Ignored if `--stateboard-only` is "
#~ "specified."
#~ msgstr ""

#~ msgid ""
#~ "`--stateboard-only` starts only the "
#~ "application stateboard. Defaults to "
#~ "TARANTOOL_STATEBOARD_ONLY or `false`. If "
#~ "specified, `INSTANCE_NAME` is ignored."
#~ msgstr ""

#~ msgid ""
#~ "# in the application directory\n"
#~ "cartridge start # starts all instances\n"
#~ "cartridge start .router_1 # start single instance\n"
#~ "cartridge start .router_1 --stateboard # "
#~ "start single instance and stateboard\n"
#~ "cartridge start --stateboard-only # start stateboard only\n"
#~ "\n"
#~ "# in a multi-application environment\n"
#~ "cartridge start app_1 # starts all instances of app_1\n"
#~ "cartridge start app_1 --stateboard # "
#~ "starts all instances of app_1 and "
#~ "stateboard\n"
#~ "cartridge start app_1.router_1 # start single instance"
#~ msgstr ""

#~ msgid ""
#~ "<!-- Please, update cmd_stop usage in"
#~ " cartridge-cli.lua file on updating "
#~ "the doc -->"
#~ msgstr ""

#~ msgid "`--apps-path PATH`"
#~ msgstr ""

#~ msgid "`--stateboard`"
#~ msgstr ""

#~ msgid "`--stateboard-only`"
#~ msgstr ""

#~ msgid ""
#~ "<!-- Please, update cmd_status usage in"
#~ " cartridge-cli.lua file on updating "
#~ "the doc -->"
#~ msgstr ""

#~ msgid "To check current instances status use `status` command:"
#~ msgstr ""

#~ msgid "cartridge status [APP_NAME[.INSTANCE_NAME]] [options]"
#~ msgstr ""

#~ msgid "All types of distribution are described below:"
#~ msgstr ""

#~ msgid ":ref:`RPM <rpm-and-deb>`"
#~ msgstr ""

#~ msgid ":ref:`DEB <rpm-and-deb>`"
#~ msgstr ""

#~ msgid ""
#~ "<!-- Please, update cmd_pack usage in"
#~ " cartridge-cli.lua file on updating "
#~ "the doc -->"
#~ msgstr ""

#~ msgid ""
#~ "`--suffix` (common for all distribution "
#~ "types) is the result file (or "
#~ "image) name suffix."
#~ msgstr ""

#~ msgid ""
#~ "`--unit-template` (used for `rpm` and"
#~ " `deb`) is the path to the "
#~ "template for the `systemd` unit file."
#~ msgstr ""

#~ msgid ""
#~ "`--instantiated-unit-template` (used for "
#~ "`rpm` and `deb`) is the path to"
#~ " the template for the `systemd` "
#~ "instantiated unit file."
#~ msgstr ""

#~ msgid ""
#~ "`--build-from` (common for all "
#~ "distribution types, used for building in"
#~ " Docker) is the path to the "
#~ "base Dockerfile of the build image. "
#~ "Defaults to `Dockerfile.build.cartridge` in "
#~ "the application root."
#~ msgstr ""

#~ msgid ""
#~ "`--sdk-local` (common for all "
#~ "distribution types, used for building in"
#~ " Docker) is a flag that indicates "
#~ "if the SDK from the local machine"
#~ " should be delivered in the result"
#~ " artifact."
#~ msgstr ""

#~ msgid ""
#~ "`--sdk-path` (common for all "
#~ "distribution types, used for building in"
#~ " Docker) is the path to the SDK"
#~ " to be delivered in the result "
#~ "artifact. Alternatively, you can pass "
#~ "the path via the `TARANTOOL_SDK_PATH` "
#~ "environment variable (this variable is "
#~ "of lower priority)."
#~ msgstr ""

#~ msgid "The result artifact name is `<name>-<version>[-<suffix>].tar.gz`."
#~ msgstr ""

#~ msgid "The result artifact name is `<name>-<version>[-<suffix>].{rpm,deb}`."
#~ msgstr ""

#~ msgid "Usage example"
#~ msgstr ""

#~ msgid ""
#~ "After package installation you need to"
#~ " specify configuration for instances to "
#~ "start."
#~ msgstr ""

#~ msgid ""
#~ "For example, if your application is "
#~ "named `myapp` and you want to "
#~ "start two instances, put the `myapp.yml`"
#~ " file into the `/etc/tarantool/conf.d` "
#~ "directory."
#~ msgstr ""

#~ msgid ""
#~ "myapp:\n"
#~ "  cluster_cookie: secret-cookie\n"
#~ "\n"
#~ "myapp.instance-1:\n"
#~ "  http_port: 8081\n"
#~ "  advertise_uri: localhost:3301\n"
#~ "\n"
#~ "myapp.instance-2:\n"
#~ "  http_port: 8082\n"
#~ "  advertise_uri: localhost:3302"
#~ msgstr ""

#~ msgid ""
#~ "For more details about instances "
#~ "configuration see the `documentation "
#~ "<https://www.tarantool.io/en/doc/latest/book/cartridge/cartridge_dev"
#~ "/#configuring-instances>`_."
#~ msgstr ""

#~ msgid "Now, start the configured instances:"
#~ msgstr ""

#~ msgid ""
#~ "systemctl start myapp@instance-1\n"
#~ "systemctl start myapp@instance-2"
#~ msgstr ""

#~ msgid ""
#~ "If you use stateful failover, you "
#~ "need to start application stateboard. "
#~ "**Note:** Your application should contain "
#~ "`stateboard.init.lua` in its root. Add "
#~ "`myapp-stateboard` section to "
#~ "`/etc/tarantool/conf.d/myapp.yml`:"
#~ msgstr ""

#~ msgid ""
#~ "myapp-stateboard:\n"
#~ "  listen: localhost:3310\n"
#~ "  password: passwd"
#~ msgstr ""

#~ msgid "Then, start stateboard service:"
#~ msgstr ""

#~ msgid "systemctl start myapp-stateboard"
#~ msgstr ""

#~ msgid "Package details"
#~ msgstr ""

#~ msgid ""
#~ "The installed package name will be "
#~ "`<name>` no matter what the artifact "
#~ "name is."
#~ msgstr ""

#~ msgid ""
#~ "unit files for running the application"
#~ " as a `systemd` service: "
#~ "`/etc/systemd/system/<app_name>.service` and "
#~ "`/etc/systemd/system/<app_name>@.service`;"
#~ msgstr ""

#~ msgid ""
#~ "application stateboard unit file: "
#~ "`/etc/systemd/system/<app_name>-stateboard.service`"
#~ msgstr ""

#~ msgid ""
#~ "(will be packed only if application "
#~ "contains `stateboard.init.lua` in it's root);"
#~ msgstr ""

#~ msgid ""
#~ "the file `/usr/lib/tmpfiles.d/<app_name>.conf` that"
#~ " allows the instance to restart after"
#~ " server restart."
#~ msgstr ""

#~ msgid "To start the application stateboard service, say:"
#~ msgstr ""

#~ msgid ""
#~ "[Unit]\n"
#~ "Description=Tarantool Cartridge app ${name}@%i\n"
#~ "After=network.target\n"
#~ "\n"
#~ "[Service]\n"
#~ "Type=simple\n"
#~ "ExecStartPre=/bin/sh -c 'mkdir -p ${workdir}.default'\n"
#~ "ExecStart=${bindir}/tarantool ${app_dir}/init.lua\n"
#~ "User=tarantool\n"
#~ "Group=tarantool\n"
#~ "\n"
#~ "Environment=TARANTOOL_WORKDIR=${workdir}.%i\n"
#~ "Environment=TARANTOOL_CFG=/etc/tarantool/conf.d/\n"
#~ "Environment=TARANTOOL_PID_FILE=/var/run/tarantool/${app_name}.%i.pid\n"
#~ "Environment=TARANTOOL_CONSOLE_SOCK=/var/run/tarantool/${app_name}.%i.control"
#~ "\n"
#~ "Environment=TARANTOOL_INSTANCE_NAME=%i"
#~ msgstr ""

#~ msgid "`app_name` - the application name;"
#~ msgstr ""

#~ msgid ""
#~ "`app_dir` - application files directory "
#~ "(by default, `/usr/share/tarantool/<app_name>`)"
#~ msgstr ""

#~ msgid ""
#~ "`workdir` - path to the work "
#~ "directory (by default, "
#~ "`/var/lib/tarantool/<app_name>`);"
#~ msgstr ""

#~ msgid "`bindir` - the directory, where Tarantool executable is placed."
#~ msgstr ""

#~ msgid "The result image is tagged as follows:"
#~ msgstr ""

#~ msgid "`<name>:<detected_version>[-<suffix>]`: by default;"
#~ msgstr ""

#~ msgid ""
#~ "`<name>:<version>[-<suffix>]`: if the `--version`"
#~ " parameter is specified;"
#~ msgstr ""
