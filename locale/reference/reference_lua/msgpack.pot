
msgid "Module `msgpack`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``msgpack`` module takes strings in MsgPack_ format and decodes them, or takes a series of non-MsgPack values and encodes them. Tarantool makes heavy internal use of MsgPack because tuples in Tarantool are :ref:`stored <index-box_lua-vs-msgpack>` as MsgPack arrays."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``msgpack`` functions and members."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`msgpack.encode() <msgpack-encode>`"
msgstr ""

msgid "Convert a Lua object to an MsgPack string"
msgstr ""

msgid ":ref:`msgpack.decode() <msgpack-decode>`"
msgstr ""

msgid "Convert a MsgPack string to a Lua object"
msgstr ""

msgid ":ref:`msgpack.decode_unchecked() <msgpack-decode_unchecked>`"
msgstr ""

msgid ":ref:`__serialize parameter <msgpack-serialize>`"
msgstr ""

msgid "Output structure specification"
msgstr ""

msgid ":ref:`msgpack.cfg <msgpack-cfg>`"
msgstr ""

msgid "Change configuration"
msgstr ""

msgid ":ref:`msgpack.NULL <msgpack-null>`"
msgstr ""

msgid "Analog of Lua's \"nil\""
msgstr ""

msgid "Convert a Lua object to a MsgPack string."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "either a scalar value or a Lua table value."
msgstr ""

msgid "return"
msgstr ""

msgid "the original value reformatted as a MsgPack string."
msgstr ""

msgid "rtype"
msgstr ""

msgid "string"
msgstr ""

msgid "Convert a MsgPack string to a Lua object."
msgstr ""

msgid "a string formatted as MsgPack."
msgstr ""

msgid "where to start, minimum = 1, maximum = string length, default = 1."
msgstr ""

msgid "(if ``msgpack_string`` is in valid MsgPack format) the original contents of ``msgpack_string``, formatted as a Lua table, (otherwise) a scalar value, such as a string or a number;"
msgstr ""

msgid "\"next_start_position\". If ``decode`` stops after parsing as far as byte N in ``msgpack_string``, then \"next_start_position\" will equal N + 1, and ``decode(msgpack_string, next_start_position)`` will continue parsing from where the previous ``decode`` stopped, plus 1. Normally ``decode`` parses all of ``msgpack_string``, so \"next_start_position\" will equal ``string.len(msgpack_string)`` + 1."
msgstr ""

msgid "table and number"
msgstr ""

msgid "Convert a MsgPack string to a Lua object. Because checking is skipped, ``decode_unchecked()`` can operate with string pointers to buffers which ``decode()`` cannot handle. For an example see the :ref:`buffer <buffer-module>` module."
msgstr ""

msgid "the original contents formatted as a Lua table;"
msgstr ""

msgid "the number of bytes that were decoded."
msgstr ""

msgid "lua object"
msgstr ""

msgid "**__serialize parameter:**"
msgstr ""

msgid "The MsgPack output structure can be specified with ``__serialize``:"
msgstr ""

msgid "'seq', 'sequence', 'array' - table encoded as an array"
msgstr ""

msgid "'map', 'mappping' - table encoded as a map"
msgstr ""

msgid "function - the meta-method called to unpack serializable representation of table, cdata or userdata objects"
msgstr ""

msgid "Serializing 'A' and 'B' with different ``__serialize`` values brings different results. To show this, here is a routine which encodes ``{'A','B'}`` both as an array and as a map, then displays each result in hexadecimal."
msgstr ""

msgid "function hexdump(bytes)\n"
"    local result = ''\n"
"    for i = 1, #bytes do\n"
"        result = result .. string.format(\"%x\", string.byte(bytes, i)) .. ' '\n"
"    end\n"
"    return result\n"
"end\n"
"\n"
"msgpack = require('msgpack')\n"
"m1 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"seq\"\n"
"                          }))\n"
"m2 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"map\"\n"
"                          }))\n"
"print('array encoding: ', hexdump(m1))\n"
"print('map encoding: ', hexdump(m2))"
msgstr ""

msgid "**Result:**"
msgstr ""

msgid "**array** encoding: 92 a1 41 a1 42\n"
"**map** encoding:   82 01 a1 41 02 a1 42"
msgstr ""

msgid "The MsgPack `Specification page <http://github.com/msgpack/msgpack/blob/master/spec.md>`_ explains that the first encoding means:"
msgstr ""

msgid "fixarray(2), fixstr(1), \"A\", fixstr(1), \"B\""
msgstr ""

msgid "and the second encoding means:"
msgstr ""

msgid "fixmap(2), key(1), fixstr(1), \"A\", key(2), fixstr(2), \"B\""
msgstr ""

msgid "Here are examples for all the common types, with the Lua-table representation on the left, with the MsgPack format name and encoding on the right."
msgstr ""

msgid "**Common Types and MsgPack Encodings**"
msgstr ""

msgid "{}"
msgstr ""

msgid "'fixmap' if metatable is 'map' = 80 otherwise 'fixarray' = 90"
msgstr ""

msgid "'a'"
msgstr ""

msgid "'fixstr' = a1 61"
msgstr ""

msgid "false"
msgstr ""

msgid "'false' = c2"
msgstr ""

msgid "true"
msgstr ""

msgid "'true' = c3"
msgstr ""

msgid "127"
msgstr ""

msgid "'positive fixint' = 7f"
msgstr ""

msgid "65535"
msgstr ""

msgid "'uint 16' = cd ff ff"
msgstr ""

msgid "4294967295"
msgstr ""

msgid "'uint 32' = ce ff ff ff ff"
msgstr ""

msgid "nil"
msgstr ""

msgid "'nil' = c0"
msgstr ""

msgid "msgpack.NULL"
msgstr ""

msgid "same as nil"
msgstr ""

msgid "[0] = 5"
msgstr ""

msgid "'fixmap(1)' + 'positive fixint' (for the key) + 'positive fixint' (for the value) = 81 00 05"
msgstr ""

msgid "[0] = nil"
msgstr ""

msgid "'fixmap(0)' = 80 -- nil is not stored when it is a missing map value"
msgstr ""

msgid "1.5"
msgstr ""

msgid "'float 64' = cb 3f f8 00 00 00 00 00 00"
msgstr ""

msgid "Some MsgPack configuration settings can be changed."
msgstr ""

msgid "The values are all either integers or boolean ``true``/``false``."
msgstr ""

msgid "Option"
msgstr ""

msgid "Default"
msgstr ""

msgid "``cfg.encode_max_depth``"
msgstr ""

msgid "128"
msgstr ""

msgid "Max recursion depth for encoding"
msgstr ""

msgid "``cfg.encode_deep_as_nil``"
msgstr ""

msgid "A flag saying whether to crop tables with nesting level deeper than ``cfg.encode_max_depth``. Not-encoded fields are replaced with one null. If not set, too high nesting is considered an error."
msgstr ""

msgid "``cfg.encode_invalid_numbers``"
msgstr ""

msgid "A flag saying whether to enable encoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.encode_load_metatables``"
msgstr ""

msgid "A flag saying whether the serializer will follow :ref:`__serialize <json-serialize>` metatable field"
msgstr ""

msgid "``cfg.encode_use_tostring``"
msgstr ""

msgid "A flag saying whether to use ``tostring()`` for unknown types"
msgstr ""

msgid "``cfg.encode_invalid_as_nil``"
msgstr ""

msgid "A flag saying whether to use NULL for non-recognized types"
msgstr ""

msgid "``cfg.encode_sparse_convert``"
msgstr ""

msgid "A flag saying whether to handle excessively sparse arrays as maps. See detailed description :ref:`below <msgpack-cfg_sparse>`"
msgstr ""

msgid "``cfg.encode_sparse_ratio``"
msgstr ""

msgid "2"
msgstr ""

msgid "1/``encode_sparse_ratio`` is the permissible percentage of missing values in a sparse array"
msgstr ""

msgid "``cfg.encode_sparse_safe``"
msgstr ""

msgid "10"
msgstr ""

msgid "A limit ensuring that small Lua arrays are always encoded as sparse arrays (instead of generating an error or encoding as a map)"
msgstr ""

msgid "``cfg.decode_invalid_numbers``"
msgstr ""

msgid "A flag saying whether to enable decoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.decode_save_metatables``"
msgstr ""

msgid "A flag saying whether to set metatables for all arrays and maps"
msgstr ""

msgid "**Sparse arrays features:**"
msgstr ""

msgid "During encoding, the MsgPack encoder tries to classify tables into one of four kinds:"
msgstr ""

msgid "map - at least one table index is not unsigned integer"
msgstr ""

msgid "regular array - all array indexes are available"
msgstr ""

msgid "sparse array - at least one array index is missing"
msgstr ""

msgid "excessively sparse array - the number of values missing exceeds the configured ratio"
msgstr ""

msgid "An array is excessively sparse when **all** the following conditions are met:"
msgstr ""

msgid "``encode_sparse_ratio`` > 0"
msgstr ""

msgid "``max(table)`` > ``encode_sparse_safe``"
msgstr ""

msgid "``max(table)`` > ``count(table)`` * ``encode_sparse_ratio``"
msgstr ""

msgid "MsgPack encoder will never consider an array to be excessively sparse when ``encode_sparse_ratio = 0``. The ``encode_sparse_safe`` limit ensures that small Lua arrays are always encoded as sparse arrays. By default, attempting to encode an excessively sparse array will generate an error. If ``encode_sparse_convert`` is set to ``true``, excessively sparse arrays will be handled as maps."
msgstr ""

msgid "**msgpack.cfg() example 1:**"
msgstr ""

msgid "If ``msgpack.cfg.encode_invalid_numbers = true`` (the default), then NaN and Inf are legal values. If that is not desirable, then ensure that ``msgpack.encode()`` will not accept them, by saying ``msgpack.cfg{encode_invalid_numbers = false}``, thus:"
msgstr ""

msgid "tarantool> msgpack = require('msgpack'); msgpack.cfg{encode_invalid_numbers = true}\n"
"---\n"
"...\n"
"tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
"---\n"
"- [1, -nan, inf, false]\n"
"- 22\n"
"...\n"
"tarantool> msgpack.cfg{encode_invalid_numbers = false}\n"
"---\n"
"...\n"
"tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
"---\n"
"- error: ... number must not be NaN or Inf'\n"
"..."
msgstr ""

msgid "**msgpack.cfg example 2:**"
msgstr ""

msgid "To avoid generating errors on attempts to encode unknown data types as userdata/cdata, you can use this code:"
msgstr ""

msgid "tarantool> httpc = require('http.client').new()\n"
"---\n"
"...\n"
"\n"
"tarantool> msgpack.encode(httpc.curl)\n"
"---\n"
"- error: unsupported Lua type 'userdata'\n"
"...\n"
"\n"
"tarantool> msgpack.encode(httpc.curl, {encode_use_tostring=true})\n"
"---\n"
"- '\"userdata: 0x010a4ef2a0\"'\n"
"..."
msgstr ""

msgid "To achieve the same effect for only one call to ``msgpack.encode()`` (i.e. without changing the configuration permanently), you can use ``msgpack.encode({1, x, y, 2}, {encode_invalid_numbers = true})``."
msgstr ""

msgid "Similar configuration settings exist for :ref:`JSON <json-module_cfg>` and :ref:`YAML <yaml-cfg>`."
msgstr ""

msgid "A value comparable to Lua \"nil\" which may be useful as a placeholder in a tuple."
msgstr ""

msgid "**Example**"
msgstr ""

msgid "tarantool> msgpack = require('msgpack')\n"
"---\n"
"...\n"
"tarantool> y = msgpack.encode({'a',1,'b',2})\n"
"---\n"
"...\n"
"tarantool> z = msgpack.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> box.space.tester:insert{20, msgpack.NULL, 20}\n"
"---\n"
"- [20, null, 20]\n"
"..."
msgstr ""

