
msgid "Submodule `box.error`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``box.error`` function is for raising an error. The difference between this function and Lua's built-in `error <https://www.lua.org/pil/8.3.html>`_ function is that when the error reaches the client, its error code is preserved. In contrast, a Lua error would always be presented to the client as ``ER_PROC_LUA``."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``box.error`` functions."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`box.error() <box_error-error>`"
msgstr ""

msgid "Throw an error"
msgstr ""

msgid ":ref:`box.error.last() <box_error-last>`"
msgstr ""

msgid "Get a description of the last error"
msgstr ""

msgid ":ref:`box.error.clear() <box_error-clear>`"
msgstr ""

msgid "Clear the record of errors"
msgstr ""

msgid ":ref:`box.error.new() <box_error-new>`"
msgstr ""

msgid "Create an error but do not throw"
msgstr ""

msgid "``box.error`` throws an object that has the cdata type and contain the following fields:"
msgstr ""

msgid "\"type\" (string) error's C++ class,"
msgstr ""

msgid "\"code\" (number) error's number,"
msgstr ""

msgid "\"message\" (string) error's message,"
msgstr ""

msgid "\"file\" (string) Tarantool source file,"
msgstr ""

msgid "\"line\" (number) line number in the Tarantool source file,"
msgstr ""

msgid "\"errno\" (number) C standard error number; this field is added only if the error is a system error (for example, due to a failure in a socket or file i/o)."
msgstr ""

msgid "When called with a Lua-table argument, the code and reason have any user-desired values. The result will be those values."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "description of an error, defined by user"
msgstr ""

msgid "numeric code for this error, defined by user"
msgstr ""

msgid "When called without arguments, ``box.error()`` re-throws whatever the last error was."
msgstr ""

msgid "Emulate a request error, with text based on one of the pre-defined Tarantool errors defined in the file `errcode.h <https://github.com/tarantool/tarantool/blob/1.10/src/box/errcode.h>`_ in the source tree. Lua constants which correspond to those Tarantool errors are defined as members of ``box.error``, for example ``box.error.NO_SUCH_USER == 45``."
msgstr ""

msgid "number of a pre-defined error"
msgstr ""

msgid "part of the message which will accompany the error"
msgstr ""

msgid "For example:"
msgstr ""

msgid "the ``NO_SUCH_USER`` message is \"``User '%s' is not found``\" -- it includes one \"``%s``\" component which will be replaced with errtext. Thus a call to ``box.error(box.error.NO_SUCH_USER, 'joe')`` or ``box.error(45, 'joe')`` will result in an error with the accompanying message \"``User 'joe' is not found``\"."
msgstr ""

msgid "except"
msgstr ""

msgid "whatever is specified in errcode-number."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error()\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
"---\n"
"- error: A access denied for user 'B' to function 'C'\n"
"..."
msgstr ""

msgid "Show the last error object."
msgstr ""

msgid "**Example**"
msgstr ""

msgid "You can reach the last error object's fields like this:"
msgstr ""

msgid "tarantool> box.schema.space.create('')\n"
"---\n"
"- error: Invalid identifier '' (expected printable symbols only or it is too long)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- Invalid identifier '' (expected printable symbols only or it is too long)\n"
"...\n"
"tarantool> box.error.last().code\n"
"---\n"
"- 70\n"
"...\n"
"tarantool> box.error.last().type\n"
"---\n"
"- ClientError\n"
"..."
msgstr ""

msgid "return"
msgstr ""

msgid "the last error object"
msgstr ""

msgid "rtype"
msgstr ""

msgid "cdata"
msgstr ""

msgid "Clear the record of errors, so functions like ``box.error()`` or ``box.error.last()`` will have no effect."
msgstr ""

msgid "tarantool> box.schema.space.create('')\n"
"---\n"
"- error: Invalid identifier '' (expected printable symbols only or it is too long)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- Invalid identifier '' (expected printable symbols only or it is too long)\n"
"...\n"
"tarantool> box.error.clear()\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- null\n"
"..."
msgstr ""

msgid "Create an error object, but do not throw. This is useful when error information should be saved for later retrieval. The parameters are the same as for :ref:`box.error() <box_error-error>`, see the description there."
msgstr ""

msgid "tarantool> e = box.error.new{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"...\n"
"tarantool> e:unpack()\n"
"---\n"
"- type: ClientError\n"
"  code: 555\n"
"  message: Arbitrary message\n"
"  trace:\n"
"  - file: '[string \"e = box.error.new{code = 555, reason = ''Arbit...\"]'\n"
"    line: 1\n"
"..."
msgstr ""

